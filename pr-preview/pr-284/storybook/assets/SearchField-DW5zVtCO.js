import{j as l}from"./jsx-runtime-DtgEGaVE.js";import{a as ce,b as pe,c as me}from"./Form-Co3XUpyT.js";import{a as fe,$ as E,b as he,T as be}from"./TextField.module-eTMcdoyU.js";import{$ as ve,a as $e}from"./useField-BolKm6uG.js";import{a as ye}from"./Button-Byufbxkw.js";import{H as xe,$ as V,z as ge,A as Ce,B as Se,c as Ee,v as Ve,C as qe,d as De}from"./useFocusable-DvoOiisW.js";import{a as He}from"./Group-ceAKJ6e-.js";import{$ as Me}from"./Text-EJwwmz-7.js";import{r as f,R as q}from"./index-BbAIUH2N.js";import{$ as Pe}from"./useControlledState-DGyHFLi9.js";import{$ as Ie}from"./useLocalizedStringFormatter-m925tTwS.js";import{c as Te}from"./clsx-B-dksMZM.js";import{c as we}from"./createLucideIcon-8wDOqnHv.js";import{B as D}from"./Button-E0d6BMJi.js";import{X as Be}from"./x-Cu6J0Y2u.js";var P={};P={"Clear search":"مسح البحث"};var I={};I={"Clear search":"Изчистване на търсене"};var T={};T={"Clear search":"Vymazat hledání"};var w={};w={"Clear search":"Ryd søgning"};var B={};B={"Clear search":"Suche zurücksetzen"};var L={};L={"Clear search":"Απαλοιφή αναζήτησης"};var k={};k={"Clear search":"Clear search"};var N={};N={"Clear search":"Borrar búsqueda"};var _={};_={"Clear search":"Tühjenda otsing"};var A={};A={"Clear search":"Tyhjennä haku"};var F={};F={"Clear search":"Effacer la recherche"};var z={};z={"Clear search":"נקה חיפוש"};var R={};R={"Clear search":"Obriši pretragu"};var W={};W={"Clear search":"Keresés törlése"};var U={};U={"Clear search":"Cancella ricerca"};var j={};j={"Clear search":"検索をクリア"};var K={};K={"Clear search":"검색 지우기"};var O={};O={"Clear search":"Išvalyti iešką"};var G={};G={"Clear search":"Notīrīt meklēšanu"};var Z={};Z={"Clear search":"Tøm søk"};var J={};J={"Clear search":"Zoekactie wissen"};var X={};X={"Clear search":"Wyczyść zawartość wyszukiwania"};var Q={};Q={"Clear search":"Limpar pesquisa"};var Y={};Y={"Clear search":"Limpar pesquisa"};var ee={};ee={"Clear search":"Ştergeţi căutarea"};var ae={};ae={"Clear search":"Очистить поиск"};var te={};te={"Clear search":"Vymazať vyhľadávanie"};var re={};re={"Clear search":"Počisti iskanje"};var ne={};ne={"Clear search":"Obriši pretragu"};var le={};le={"Clear search":"Rensa sökning"};var ie={};ie={"Clear search":"Aramayı temizle"};var oe={};oe={"Clear search":"Очистити пошук"};var se={};se={"Clear search":"清除搜索"};var ue={};ue={"Clear search":"清除搜尋條件"};var de={};de={"ar-AE":P,"bg-BG":I,"cs-CZ":T,"da-DK":w,"de-DE":B,"el-GR":L,"en-US":k,"es-ES":N,"et-EE":_,"fi-FI":A,"fr-FR":F,"he-IL":z,"hr-HR":R,"hu-HU":W,"it-IT":U,"ja-JP":j,"ko-KR":K,"lt-LT":O,"lv-LV":G,"nb-NO":Z,"nl-NL":J,"pl-PL":X,"pt-BR":Q,"pt-PT":Y,"ro-RO":ee,"ru-RU":ae,"sk-SK":te,"sl-SI":re,"sr-SP":ne,"sv-SE":le,"tr-TR":ie,"uk-UA":oe,"zh-CN":se,"zh-TW":ue};function Le(a){return a&&a.__esModule?a.default:a}function ke(a,e,t){let d=Ie(Le(de),"@react-aria/searchfield"),{isDisabled:n,isReadOnly:i,onSubmit:c,onClear:s,type:h="search"}=a,m=r=>{const o=r.key;o==="Enter"&&(n||i)&&r.preventDefault(),!(n||i)&&(o==="Enter"&&c&&(r.preventDefault(),c(e.value)),o==="Escape"&&(e.value===""&&(!t.current||t.current.value==="")?r.continuePropagation():(r.preventDefault(),e.setValue(""),s&&s())))},b=()=>{e.setValue(""),s&&s()},v=()=>{var r;(r=t.current)===null||r===void 0||r.focus()},{labelProps:u,inputProps:$,descriptionProps:y,errorMessageProps:x,...g}=fe({...a,value:e.value,onChange:e.setValue,onKeyDown:i?a.onKeyDown:xe(m,a.onKeyDown),type:h},t);return{labelProps:u,inputProps:{...$,defaultValue:void 0},clearButtonProps:{"aria-label":d.format("Clear search"),excludeFromTabOrder:!0,preventFocusOnPress:!0,isDisabled:n||i,onPress:b,onPressStart:v},descriptionProps:y,errorMessageProps:x,...g}}function Ne(a){let[e,t]=Pe(H(a.value),H(a.defaultValue)||"",a.onChange);return{value:e,setValue:t}}function H(a){if(a!=null)return a.toString()}const _e=f.createContext(null),Ae=f.forwardRef(function(e,t){[e,t]=V(e,t,_e);let{validationBehavior:d}=ge(ce)||{};var n,i;let c=(i=(n=e.validationBehavior)!==null&&n!==void 0?n:d)!==null&&i!==void 0?i:"native",s=f.useRef(null),[h,m]=V({},s,E),[b,v]=Ce(),u=Ne({...e,validationBehavior:c}),{labelProps:$,inputProps:y,clearButtonProps:x,descriptionProps:g,errorMessageProps:r,...o}=ke({...Se(e),label:v,validationBehavior:c},u,m),C=Ee({...e,values:{isEmpty:u.value==="",isDisabled:e.isDisabled||!1,isInvalid:o.isInvalid||!1,state:u},defaultClassName:"react-aria-SearchField"}),S=Ve(e);return delete S.id,q.createElement("div",{...S,...C,ref:t,slot:e.slot||void 0,"data-empty":u.value===""||void 0,"data-disabled":e.isDisabled||void 0,"data-invalid":o.isInvalid||void 0},q.createElement(qe,{values:[[ve,{...$,ref:b}],[E,{...De(y,h),ref:m}],[ye,x],[Me,{slots:{description:g,errorMessage:r}}],[He,{isInvalid:o.isInvalid,isDisabled:e.isDisabled||!1}],[pe,o]]},C.children))});/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Fe=we("Search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]),ze='"../theme/tokens.css"',Re='"Inter", sans-serif',We="#143c50",Ue="#1f1f1f",je="#ffffff",Ke="_container_1thfk_5",Oe="_inputContainer_1thfk_12",Ge="_icon_1thfk_18",Ze="_clear_1thfk_26",Je="_input_1thfk_12",p={tokens:ze,display:Re,blue150:We,gray150:Ue,backgroundPrimary:je,container:Ke,inputContainer:Oe,icon:Ge,clear:Ze,input:Je},M=({placeholder:a,buttonText:e,...t})=>{const[d,n]=f.useState(!1);return l.jsxs(Ae,{onInput:()=>n(!0),onClear:()=>n(!1),className:p.container,...t,children:[l.jsx($e,{hidden:!0,children:a}),l.jsxs("div",{className:p.inputContainer,children:[l.jsx(Fe,{size:20,className:p.icon}),l.jsx(he,{className:Te(be.input,p.input),placeholder:a}),d&&l.jsx(D,{variant:"icon",size:"small",className:p.clear,children:l.jsx(Be,{size:20,"aria-hidden":!0})})]}),l.jsx(me,{}),l.jsx(D,{type:"submit",children:e||"Sök"})]})};try{M.displayName="SearchField",M.__docgenInfo={description:"",displayName:"SearchField",props:{placeholder:{defaultValue:null,description:"Placeholder text",name:"placeholder",required:!0,type:{name:"string"}},buttonText:{defaultValue:{value:"'Sök'"},description:"Text displayed on the 'search' button",name:"buttonText",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: string) => true | ValidationError | null)"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},"aria-controls":{defaultValue:null,description:"Identifies the element (or elements) whose contents or presence are controlled by the current element.",name:"aria-controls",required:!1,type:{name:"string"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string"}},onSelect:{defaultValue:null,description:"Handler that is called when text in the input is selected. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/select_event).",name:"onSelect",required:!1,type:{name:"ReactEventHandler<HTMLInputElement>"}},spellCheck:{defaultValue:null,description:"An enumerated attribute that defines whether the element may be checked for spelling errors. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck).",name:"spellCheck",required:!1,type:{name:"string"}},autoCorrect:{defaultValue:null,description:"An attribute that takes as its value a space-separated string that describes what, if any, type of autocomplete functionality the input should provide. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autocomplete).",name:"autoCorrect",required:!1,type:{name:"string"}},inputMode:{defaultValue:null,description:"Hints at the type of data that might be entered by the user while editing the element or its contents. See [MDN](https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute).",name:"inputMode",required:!1,type:{name:"enum",value:[{value:'"text"'},{value:'"none"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"numeric"'},{value:'"decimal"'}]}},"aria-activedescendant":{defaultValue:null,description:"Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",name:"aria-activedescendant",required:!1,type:{name:"string"}},"aria-autocomplete":{defaultValue:null,description:`Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
presented if they are made.`,name:"aria-autocomplete",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"list"'},{value:'"inline"'},{value:'"both"'}]}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree"'}},onCopy:{defaultValue:null,description:"Handler that is called when the user copies text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy).",name:"onCopy",required:!1,type:{name:"ClipboardEventHandler<HTMLInputElement>"}},onCut:{defaultValue:null,description:"Handler that is called when the user cuts text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut).",name:"onCut",required:!1,type:{name:"ClipboardEventHandler<HTMLInputElement>"}},onPaste:{defaultValue:null,description:"Handler that is called when the user pastes text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste).",name:"onPaste",required:!1,type:{name:"ClipboardEventHandler<HTMLInputElement>"}},onCompositionEnd:{defaultValue:null,description:"Handler that is called when a text composition system completes or cancels the current text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event).",name:"onCompositionEnd",required:!1,type:{name:"CompositionEventHandler<HTMLInputElement>"}},onCompositionStart:{defaultValue:null,description:"Handler that is called when a text composition system starts a new text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event).",name:"onCompositionStart",required:!1,type:{name:"CompositionEventHandler<HTMLInputElement>"}},onCompositionUpdate:{defaultValue:null,description:"Handler that is called when a new character is received in the current text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event).",name:"onCompositionUpdate",required:!1,type:{name:"CompositionEventHandler<HTMLInputElement>"}},onBeforeInput:{defaultValue:null,description:"Handler that is called when the input value is about to be modified. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event).",name:"onBeforeInput",required:!1,type:{name:"FormEventHandler<HTMLInputElement>"}},onInput:{defaultValue:null,description:"Handler that is called when the input value is modified. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event).",name:"onInput",required:!1,type:{name:"FormEventHandler<HTMLInputElement>"}},onSubmit:{defaultValue:null,description:"Handler that is called when the SearchField is submitted.",name:"onSubmit",required:!1,type:{name:"((value: string) => void)"}},onClear:{defaultValue:null,description:"Handler that is called when the clear button is pressed.",name:"onClear",required:!1,type:{name:"(() => void)"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"The maximum number of characters supported by the input. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefmaxlength).",name:"maxLength",required:!1,type:{name:"number"}},minLength:{defaultValue:null,description:"The minimum number of characters required by the input. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefminlength).",name:"minLength",required:!1,type:{name:"number"}},pattern:{defaultValue:null,description:"Regex pattern that the value of the input must match to be valid. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefpattern).",name:"pattern",required:!1,type:{name:"string"}},type:{defaultValue:null,description:"The type of input to render. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdeftype).",name:"type",required:!1,type:{name:'"text" | (string & {}) | "search" | "tel" | "url" | "email" | "password"'}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: SearchFieldRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: SearchFieldRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: SearchFieldRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}}}}}catch{}export{M as S};
