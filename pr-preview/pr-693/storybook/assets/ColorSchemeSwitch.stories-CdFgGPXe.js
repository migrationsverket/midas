import{j as d}from"./jsx-runtime-BYYWji4R.js";import{r as c,R as V}from"./index-ClcD9ViR.js";import{c as E}from"./clsx-B-dksMZM.js";import{l as R,b as _,d as A,$ as K,a as D}from"./utils-BLyg3OOq.js";import{$ as F}from"./useControlledState-H1tiOFpU.js";import{$ as W}from"./useButton-DVh6qrnV.js";import{b as z}from"./FocusScope-Ce8r-Upm.js";import{b as L,a as G,$ as U}from"./useFocusRing-DVgdqMmF.js";import{$ as O}from"./context-d6PNTTSe.js";import{$ as Z}from"./useToggleState-DcHMzLVj.js";import{B as T}from"./Button.module-AG3JZ-l4.js";import{c as N}from"./createLucideIcon-DQK9Z80p.js";import{$ as w}from"./VisuallyHidden-B-Fwaf7X.js";import{u as $,e as P}from"./index-CqmFxPum.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./_class_private_field_init-BOtJyCjG.js";import"./index-DQEgcCId.js";function M(t,e,n){const{isSelected:a}=e,{isPressed:l,buttonProps:s}=W({...t,onPress:R(e.toggle,t.onPress)},n);return{isPressed:l,isSelected:a,isDisabled:t.isDisabled||!1,buttonProps:_(s,{"aria-pressed":a})}}function J(t,e){const{"aria-label":n,"aria-labelledby":a,orientation:l="horizontal"}=t;let[s,i]=c.useState(!1);A(()=>{var o;i(!!(e.current&&(!((o=e.current.parentElement)===null||o===void 0)&&o.closest('[role="toolbar"]'))))});const{direction:r}=O(),f=r==="rtl"&&l==="horizontal";let m=z(e);const b=o=>{if(o.currentTarget.contains(o.target)){if(l==="horizontal"&&o.key==="ArrowRight"||l==="vertical"&&o.key==="ArrowDown")f?m.focusPrevious():m.focusNext();else if(l==="horizontal"&&o.key==="ArrowLeft"||l==="vertical"&&o.key==="ArrowUp")f?m.focusNext():m.focusPrevious();else if(o.key==="Tab"){o.stopPropagation(),u.current=document.activeElement,o.shiftKey?m.focusFirst():m.focusLast();return}else return;o.stopPropagation(),o.preventDefault()}},u=c.useRef(null),v=o=>{!o.currentTarget.contains(o.relatedTarget)&&!u.current&&(u.current=o.target)},y=o=>{var p;if(u.current&&!o.currentTarget.contains(o.relatedTarget)&&(!((p=e.current)===null||p===void 0)&&p.contains(o.target))){var S;(S=u.current)===null||S===void 0||S.focus(),u.current=null}};return{toolbarProps:{...L(t,{labelable:!0}),role:s?"group":"toolbar","aria-orientation":l,"aria-label":n,"aria-labelledby":n==null?a:void 0,onKeyDownCapture:s?void 0:b,onFocusCapture:s?void 0:y,onBlurCapture:s?void 0:v}}}function Q(t,e,n){let{isDisabled:a}=t,{toolbarProps:l}=J(t,n);return{groupProps:{...l,role:e.selectionMode==="single"?"radiogroup":l.role,"aria-disabled":a}}}function X(t,e,n){let a={isSelected:e.selectedKeys.has(t.id),setSelected(f){e.setSelected(t.id,f)},toggle(){e.toggleKey(t.id)}},{isPressed:l,isSelected:s,isDisabled:i,buttonProps:r}=M({...t,id:void 0,isDisabled:t.isDisabled||e.isDisabled},a,n);return e.selectionMode==="single"&&(r.role="radio",r["aria-checked"]=a.isSelected,delete r["aria-pressed"]),{isPressed:l,isSelected:s,isDisabled:i,buttonProps:r}}function Y(t){let{selectionMode:e="single",disallowEmptySelection:n,isDisabled:a=!1}=t,[l,s]=F(c.useMemo(()=>t.selectedKeys?new Set(t.selectedKeys):void 0,[t.selectedKeys]),c.useMemo(()=>t.defaultSelectedKeys?new Set(t.defaultSelectedKeys):new Set,[t.defaultSelectedKeys]),t.onSelectionChange);return{selectionMode:e,isDisabled:a,selectedKeys:l,setSelectedKeys:s,toggleKey(i){let r;e==="multiple"?(r=new Set(l),r.has(i)&&(!n||r.size>1)?r.delete(i):r.add(i)):r=new Set(l.has(i)&&!n?[]:[i]),s(r)},setSelected(i,r){r!==l.has(i)&&this.toggleKey(i)}}}const ee=c.createContext({}),I=c.createContext(null),te=c.forwardRef(function(e,n){[e,n]=K(e,n,ee);let a=Y(e),{groupProps:l}=Q(e,a,n),s=D({...e,values:{isDisabled:a.isDisabled,state:a},defaultClassName:"react-aria-ToggleButtonGroup"});return V.createElement("div",{...l,...s,ref:n,slot:e.slot||void 0,"data-orientation":e.orientation||"horizontal","data-disabled":e.isDisabled||void 0},V.createElement(I.Provider,{value:a},s.children))}),ae=c.createContext({}),ne=c.forwardRef(function(e,n){[e,n]=K(e,n,ae);let a=c.useContext(I),l=Z(a&&e.id!=null?{isSelected:a.selectedKeys.has(e.id),onChange(p){a.setSelected(e.id,p)}}:e),{buttonProps:s,isPressed:i,isSelected:r,isDisabled:f}=a&&e.id!=null?X({...e,id:e.id},a,n):M({...e,id:e.id!=null?String(e.id):void 0},l,n),{focusProps:m,isFocused:b,isFocusVisible:u}=G(e),{hoverProps:v,isHovered:y}=U(e),o=D({...e,id:void 0,values:{isHovered:y,isPressed:i,isFocused:b,isSelected:l.isSelected,isFocusVisible:u,isDisabled:f,state:l},defaultClassName:"react-aria-ToggleButton"});return V.createElement("button",{..._(s,m,v),...o,ref:n,slot:e.slot||void 0,"data-focused":b||void 0,"data-disabled":f||void 0,"data-pressed":i||void 0,"data-selected":r||void 0,"data-hovered":y||void 0,"data-focus-visible":u||void 0})});/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const le=N("Laptop",[["path",{d:"M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16",key:"tarvll"}]]);/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const oe=N("Moon",[["path",{d:"M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z",key:"a7tn18"}]]);/**
 * @license lucide-react v0.453.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const se=N("Sun",[["circle",{cx:"12",cy:"12",r:"4",key:"4exip2"}],["path",{d:"M12 2v2",key:"tus03m"}],["path",{d:"M12 20v2",key:"1lh1kg"}],["path",{d:"m4.93 4.93 1.41 1.41",key:"149t6j"}],["path",{d:"m17.66 17.66 1.41 1.41",key:"ptbguv"}],["path",{d:"M2 12h2",key:"1t8f8n"}],["path",{d:"M20 12h2",key:"1q8mjw"}],["path",{d:"m6.34 17.66-1.41 1.41",key:"1m8zz5"}],["path",{d:"m19.07 4.93-1.41 1.41",key:"1shlcs"}]]),re="_group_syep5_4",ie="_toggleButton_syep5_13",j={group:re,toggleButton:ie},h=({...t})=>d.jsx(ne,{...t,className:E(T.button,T.iconBtn,j.toggleButton,t.className)});try{h.displayName="ToggleButton",h.__docgenInfo={description:"",displayName:"ToggleButton",props:{id:{defaultValue:null,description:"When used in a ToggleButtonGroup, an identifier for the item in `selectedKeys`. When used standalone, a DOM id.",name:"id",required:!1,type:{name:"Key"}},isDisabled:{defaultValue:null,description:"Whether the button is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onChange:{defaultValue:null,description:"Handler that is called when the element's selection state changes.",name:"onChange",required:!1,type:{name:"(isSelected: boolean) => void"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-controls":{defaultValue:null,description:"Identifies the element (or elements) whose contents or presence are controlled by the current element.",name:"aria-controls",required:!1,type:{name:"string"}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree"'}},"aria-pressed":{defaultValue:null,description:'Indicates the current "pressed" state of toggle buttons.',name:"aria-pressed",required:!1,type:{name:'boolean | "true" | "false" | "mixed"'}},onClick:{defaultValue:null,description:"**Not recommended â€“ use `onPress` instead.** `onClick` is an alias for `onPress`\nprovided for compatibility with other libraries. `onPress` provides \nadditional event details for non-mouse interactions.",name:"onClick",required:!1,type:{name:"(e: MouseEvent<FocusableElement, MouseEvent>) => void"}},onPress:{defaultValue:null,description:"Handler that is called when the press is released over the target.",name:"onPress",required:!1,type:{name:"(e: PressEvent) => void"}},onPressStart:{defaultValue:null,description:"Handler that is called when a press interaction starts.",name:"onPressStart",required:!1,type:{name:"(e: PressEvent) => void"}},onPressEnd:{defaultValue:null,description:`Handler that is called when a press interaction ends, either
over the target or when the pointer leaves the target.`,name:"onPressEnd",required:!1,type:{name:"(e: PressEvent) => void"}},onPressChange:{defaultValue:null,description:"Handler that is called when the press state changes.",name:"onPressChange",required:!1,type:{name:"(isPressed: boolean) => void"}},onPressUp:{defaultValue:null,description:`Handler that is called when a press is released over the target, regardless of
whether it started on the target or not.`,name:"onPressUp",required:!1,type:{name:"(e: PressEvent) => void"}},type:{defaultValue:{value:"'button'"},description:"The behavior of the button when used in an HTML form.",name:"type",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"submit"'},{value:'"reset"'}]}},preventFocusOnPress:{defaultValue:null,description:`Whether to prevent focus from moving to the button when pressing it.

Caution, this can make the button inaccessible and should only be used when alternative keyboard interaction is provided,
such as ComboBox's MenuTrigger or a NumberField's increment/decrement control.`,name:"preventFocusOnPress",required:!1,type:{name:"boolean"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},defaultSelected:{defaultValue:null,description:"Whether the element should be selected (uncontrolled).",name:"defaultSelected",required:!1,type:{name:"boolean"}},isSelected:{defaultValue:null,description:"Whether the element should be selected (controlled).",name:"isSelected",required:!1,type:{name:"boolean"}},onHoverStart:{defaultValue:null,description:"Handler that is called when a hover interaction starts.",name:"onHoverStart",required:!1,type:{name:"(e: HoverEvent) => void"}},onHoverEnd:{defaultValue:null,description:"Handler that is called when a hover interaction ends.",name:"onHoverEnd",required:!1,type:{name:"(e: HoverEvent) => void"}},onHoverChange:{defaultValue:null,description:"Handler that is called when the hover state changes.",name:"onHoverChange",required:!1,type:{name:"(isHovering: boolean) => void"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: ToggleButtonRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: ToggleButtonRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: ToggleButtonRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}}}}}catch{}const q=({...t})=>d.jsx(te,{...t,className:E(j.group,t.className)});try{q.displayName="ToggleButtonGroup",q.__docgenInfo={description:"",displayName:"ToggleButtonGroup",props:{orientation:{defaultValue:{value:"'horizontal'"},description:"The orientation of the the toggle button group.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},selectionMode:{defaultValue:null,description:"Whether single or multiple selection is enabled.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:"Iterable<Key>"}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:"Iterable<Key>"}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"(keys: Set<Key>) => void"}},isDisabled:{defaultValue:null,description:"Whether all items are disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: ToggleButtonGroupRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: ToggleButtonGroupRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: ToggleButtonGroupRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string"}}}}}catch{}const de="_button_1dy1i_1",x={button:de},C=({selector:t="body",defaultValue:e=new Set(["light dark"]),className:n})=>{const[a,l]=c.useState(e);return c.useEffect(()=>{const s=document.querySelector(t);s?s.style.setProperty("color-scheme",Array.from(a).join(" ")):console.warn(`No element found for selector: "${t}"`)},[a,t]),d.jsxs(q,{selectionMode:"single",selectedKeys:a,onSelectionChange:l,disallowEmptySelection:!0,className:E(n),children:[d.jsxs(h,{id:"light dark",className:x.button,children:[d.jsx(le,{}),d.jsx(w,{children:"SysteminstÃ¤llning"})]}),d.jsxs(h,{id:"light",className:x.button,children:[d.jsx(se,{}),d.jsx(w,{children:"Ljust lÃ¤ge"})]}),d.jsxs(h,{id:"dark",className:x.button,children:[d.jsx(oe,{}),d.jsx(w,{children:"MÃ¶rkt lÃ¤ge"})]})]})};try{C.displayName="ColorSchemeSwitch",C.__docgenInfo={description:"",displayName:"ColorSchemeSwitch",props:{selector:{defaultValue:{value:"body"},description:"Choose what element that should be affected by the scheme switch.",name:"selector",required:!1,type:{name:"string"}},defaultValue:{defaultValue:{value:"new Set(['light dark'])"},description:'Set the default value for the color scheme. Default is "light dark" meaning follow system settings',name:"defaultValue",required:!1,type:{name:'Set<"light" | "dark" | "light dark">'}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}const Ce={component:C,title:"Components/ColorSchemeSwitch",tags:["autodocs"],args:{className:"test-class"}},g={play:async({canvas:t,step:e,args:n})=>{await e("It should be possible to tab to a button and select it",async()=>{await $.tab(),await $.keyboard("[ArrowRight]"),await $.keyboard("[Space]");const a=t.getByText("Ljust lÃ¤ge").parentElement;await P(a).toHaveAttribute("aria-checked","true")}),await e("color-scheme on body element should be light",async()=>{const a=document.body.style.colorScheme;await P(a).toBe("light")}),await e("it should accept a custom className",async()=>{await P(t.getByRole("radiogroup")).toHaveClass(n.className)})}};var k,B,H;g.parameters={...g.parameters,docs:{...(k=g.parameters)==null?void 0:k.docs,source:{originalSource:`{
  play: async ({
    canvas,
    step,
    args
  }) => {
    await step('It should be possible to tab to a button and select it', async () => {
      await userEvent.tab();
      await userEvent.keyboard('[ArrowRight]');
      await userEvent.keyboard('[Space]');
      const lightModeButton = canvas.getByText('Ljust lÃ¤ge').parentElement;
      await expect(lightModeButton).toHaveAttribute('aria-checked', 'true');
    });
    await step('color-scheme on body element should be light', async () => {
      const newColorScheme = document.body.style.colorScheme;
      await expect(newColorScheme).toBe('light');
    });
    await step('it should accept a custom className', async () => {
      await expect(canvas.getByRole('radiogroup')).toHaveClass(args.className as string);
    });
  }
}`,...(H=(B=g.parameters)==null?void 0:B.docs)==null?void 0:H.source}}};const Ee=["Example"];export{g as Example,Ee as __namedExportsOrder,Ce as default};
