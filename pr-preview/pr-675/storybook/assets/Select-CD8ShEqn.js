import{j as t}from"./jsx-runtime-BYYWji4R.js";import{R as F,r as y}from"./index-ClcD9ViR.js";import{c as $}from"./clsx-B-dksMZM.js";import{c as I,b as W,m as L,f as A}from"./utils-oc6myKvD.js";import{T as D,$ as R,a as z}from"./Tag-C3l0H88h.js";import{a as U}from"./TextField-DHkjYeex.js";import{b as G}from"./Collection-BHHe22Am.js";import{C as O}from"./Checkbox-C2_O4S39.js";import{C as X}from"./check-Dn7CvcrD.js";import{s as M,L as J,a as Q,b as Y,c as Z}from"./ListBoxSection-8SLR-c1f.js";import{e as ee}from"./useFocusRing-DUrskli4.js";import{o as le,p as ae}from"./Dialog-AjuNQtAO.js";import{$ as te}from"./ListKeyboardDelegate-EWbBYqg2.js";import{g as ne}from"./SelectionManager-BGs3xiJx.js";import{$ as ie}from"./filterDOMProps-CeZl_uWj.js";import{$ as re}from"./useCollator-B-UPZ4SJ.js";import{$ as oe}from"./useField-aNJ8ypzk.js";import{a as se,b as de,c as ue}from"./useFormValidation-Cv-fFL6t.js";import{$ as ce}from"./useListState-CAy-Xhih.js";import{u as me}from"./useObserveElement-BP4zVUS4.js";import{a as pe}from"./VisuallyHidden-uwYO98VR.js";import{X as he}from"./x-BaIpobvV.js";import{$ as fe}from"./useButton-Cqc6u4_f.js";import{C as ye}from"./chevron-down-CVNiYbvV.js";import{$ as be,F as ve}from"./FieldError-C31dJ6Xr.js";import{L as ge}from"./Label-C8mJCmL2.js";import{T as Ve}from"./Text-Dpx6Gex-.js";function j(e){return null}j.getCollectionNode=function*(l,i){let{childItems:a,title:r,children:n}=l,o=l.title||l.children,u=l.textValue||(typeof o=="string"?o:"")||l["aria-label"]||"";!u&&(i!=null&&i.suppressTextValueWarning),yield{type:"item",props:l,rendered:o,textValue:u,"aria-label":l["aria-label"],hasChildNodes:qe(l),*childNodes(){if(a)for(let s of a)yield{type:"item",value:s};else if(r){let s=[];F.Children.forEach(n,c=>{s.push({type:"item",element:c})}),yield*s}}}};function qe(e){return e.hasChildItems!=null?e.hasChildItems:!!(e.childItems||e.title&&F.Children.count(e.children)>0)}let B=j;function P(e){return null}P.getCollectionNode=function*(l){let{children:i,title:a,items:r}=l;yield{type:"section",props:l,hasChildNodes:!0,rendered:a,"aria-label":l["aria-label"],*childNodes(){if(typeof i=="function"){if(!r)throw new Error("props.children was a function but props.items is missing");for(let n of r)yield{type:"item",value:n,renderer:i}}else{let n=[];F.Children.forEach(i,o=>{n.push({type:"item",element:o})}),yield*n}}}};let Se=P;const S=({className:e,children:l,...i})=>t.jsx("button",{type:"button",className:$(M.listBoxItem,M.listBoxButton,e),...i,children:l});try{S.displayName="ListBoxButton",S.__docgenInfo={description:"",displayName:"ListBoxButton",props:{}}}catch{}const we="_wrapper_1rlqo_10",xe="_trigger_1rlqo_21",Ke="_medium_1rlqo_35",Te="_icon_1rlqo_71",Ce="_tagGroup_1rlqo_77",_e="_listBoxItemCheckmark_1rlqo_93",Fe="_triggerContainer_1rlqo_98",$e="_selectValueTag_1rlqo_104",ke="_clearButton_1rlqo_120",Ee="_truncate_1rlqo_132",Ie="_checkboxContainer_1rlqo_169",h={wrapper:we,trigger:xe,medium:Ke,icon:Te,tagGroup:Ce,listBoxItemCheckmark:_e,triggerContainer:Fe,selectValueTag:$e,clearButton:ke,truncate:Ee,checkboxContainer:Ie},H=({item:e})=>t.jsx(Y,{...e.value,textValue:e.textValue,children:({isDisabled:l,isSelected:i,selectionMode:a})=>t.jsxs(t.Fragment,{children:[a==="multiple"?t.jsx("div",{className:h.checkboxContainer,children:t.jsx(O,{isDisabled:l,isSelected:i,isReadOnly:!0,excludeFromTabOrder:!0,"aria-label":e.textValue})}):null,e.rendered,i&&a==="single"?t.jsx(X,{size:20,className:h.listBoxItemCheckmark}):null]})}),Me=({section:e,state:l})=>t.jsx(Q,{...e.value,children:l.collection.getChildren?t.jsx(G,{items:l.collection.getChildren(e.key),children:i=>t.jsx(H,{item:i})}):null}),w=({state:e,...l})=>t.jsx(J,{...l,...e,escapeKeyBehavior:"none",onSelectionChange:e.setSelectedKeys,items:e.collection,children:i=>i.type==="section"?t.jsx(Me,{state:e,section:i}):t.jsx(H,{item:i})});try{w.displayName="SelectListBox",w.__docgenInfo={description:"",displayName:"SelectListBox",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"MultiSelectState<T>"}},isVirtualized:{defaultValue:null,description:"Whether the listbox uses virtual scrolling.",name:"isVirtualized",required:!1,type:{name:"boolean"}},keyboardDelegate:{defaultValue:null,description:`An optional keyboard delegate implementation for type to select,
to override the default.`,name:"keyboardDelegate",required:!1,type:{name:"KeyboardDelegate"}},layoutDelegate:{defaultValue:null,description:`A delegate object that provides layout information for items in the collection.
By default this uses the DOM, but this can be overridden to implement things like
virtualized scrolling.`,name:"layoutDelegate",required:!1,type:{name:"LayoutDelegate"}},shouldUseVirtualFocus:{defaultValue:null,description:"Whether the listbox items should use virtual focus instead of being focused directly.",name:"shouldUseVirtualFocus",required:!1,type:{name:"boolean"}},linkBehavior:{defaultValue:{value:"'override'"},description:`The behavior of links in the collection.
- 'action': link behaves like onAction.
- 'selection': link follows selection interactions (e.g. if URL drives selection).
- 'override': links override all other interactions (link items are not selectable).`,name:"linkBehavior",required:!1,type:{name:"enum",value:[{value:'"selection"'},{value:'"action"'},{value:'"override"'}]}},autoFocus:{defaultValue:null,description:"Whether to auto focus the listbox or an option.",name:"autoFocus",required:!1,type:{name:"boolean | FocusStrategy"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},escapeKeyBehavior:{defaultValue:{value:"'clearSelection'"},description:`Whether pressing the escape key should clear selection in the listbox or not.

Most experiences should not modify this option as it eliminates a keyboard user's ability to
easily clear selection. Only use if the escape key is being handled externally or should not
trigger selection clearing contextually.`,name:"escapeKeyBehavior",required:!1,type:{name:"enum",value:[{value:'"clearSelection"'},{value:'"none"'}]}},shouldFocusWrap:{defaultValue:null,description:"Whether focus should wrap around when the end/start is reached.",name:"shouldFocusWrap",required:!1,type:{name:"boolean"}},onAction:{defaultValue:null,description:"Handler that is called when a user performs an action on an item. The exact user event depends on\nthe collection's `selectionBehavior` prop and the interaction modality.",name:"onAction",required:!1,type:{name:"(key: Key) => void"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!1,type:{name:"Iterable<T>"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},selectionMode:{defaultValue:null,description:"The type of selection that is allowed in the collection.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"single"'},{value:'"multiple"'}]}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"(keys: Selection) => void"}},label:{defaultValue:null,description:"An optional visual label for the listbox.",name:"label",required:!1,type:{name:"ReactNode"}},selectionBehavior:{defaultValue:null,description:"How multiple selection should behave in the collection.",name:"selectionBehavior",required:!1,type:{name:"enum",value:[{value:'"toggle"'},{value:'"replace"'}]}},shouldSelectOnPressUp:{defaultValue:null,description:"Whether selection should occur on press up instead of press down.",name:"shouldSelectOnPressUp",required:!1,type:{name:"boolean"}},shouldFocusOnHover:{defaultValue:null,description:"Whether options should be focused when the user hovers over them.",name:"shouldFocusOnHover",required:!1,type:{name:"boolean"}}}}}catch{}function Be(e,l,i){const{disallowEmptySelection:a,isDisabled:r}=e,n=re({usage:"search",sensitivity:"base"}),o=y.useMemo(()=>new te(l.collection,l.disabledKeys,null,n),[l.collection,l.disabledKeys,n]),{menuTriggerProps:u,menuProps:s}=le({isDisabled:r,type:"listbox"},l,i),c=m=>{const{selectedKeys:q,selectionMode:N}=l,E=q.values().next().value;if(N==="single")switch(m.key){case"ArrowLeft":{m.preventDefault();const v=q.size>0?o.getKeyAbove(E):o.getFirstKey();v&&l.setSelectedKeys([v]);break}case"ArrowRight":{m.preventDefault();const v=q.size>0?o.getKeyBelow(E):o.getFirstKey();v&&l.setSelectedKeys([v]);break}}},{typeSelectProps:d}=ne({keyboardDelegate:o,selectionManager:l.selectionManager,onTypeSelect(m){l.setSelectedKeys([m])}}),{labelProps:p,fieldProps:b}=oe({...e,labelElementType:"span"});d.onKeyDown=d.onKeyDownCapture,delete d.onKeyDownCapture;const g=ie(e,{labelable:!0}),f=I(d,u,b),k=W();return{labelProps:{...p,onClick:()=>{var m;e.isDisabled||((m=i.current)==null||m.focus(),ee("keyboard"))}},triggerProps:I(g,{...f,onKeyDown:L(f.onKeyDown,c,e.onKeyDown),onKeyUp:e.onKeyUp,"aria-labelledby":[f["aria-labelledby"],f["aria-label"]&&!f["aria-labelledby"]?f.id:null,k].filter(Boolean).join(" "),onFocus(m){l.isFocused||(e.onFocus&&e.onFocus(m),l.setFocused(!0))},onBlur(m){l.isOpen||(e.onBlur&&e.onBlur(m),l.setFocused(!1))}}),valueProps:{id:k},menuProps:{...s,disallowEmptySelection:a,autoFocus:l.focusStrategy||!0,shouldSelectOnPressUp:!0,shouldFocusOnHover:!0,onBlur:m=>{m.currentTarget.contains(m.relatedTarget)||(e.onBlur&&e.onBlur(m),l.setFocused(!1))},"aria-labelledby":[b["aria-labelledby"],f["aria-label"]&&!b["aria-labelledby"]?f.id:null].filter(Boolean).join(" ")}}}function Oe(e){const{collection:l,disabledKeys:i,selectionManager:a,selectionManager:{setSelectedKeys:r,selectedKeys:n,selectionMode:o}}=ce(e),u=[],s=n.size!==0?Array.from(n).map(c=>{const d=l.getItem(c);return d||u.push(c),d}).filter(Boolean):null;return u.length&&console.warn(`Select: Keys "${u.join(", ")}" passed to "selectedKeys" are not present in the collection.`),{collection:l,disabledKeys:i,selectionManager:a,selectionMode:o,selectedKeys:n,setSelectedKeys:r.bind(a),selectedItems:s}}function je(e){const[l,i]=y.useState(!1),a=ae(e),r=e.selectionMode==="single",n=Oe({...e,onSelectionChange:d=>{e.onSelectionChange&&e.onSelectionChange(d),r&&a.close()}}),o=se({...e,validationBehavior:"native",value:n.selectedKeys}),u=n.collection.size===0,s=!!n.selectedKeys.size,c=y.useCallback(()=>{o.resetValidation(),o.commitValidation()},[o]);return y.useEffect(()=>{r&&s&&c()},[s,r,c]),{...n,...a,close(){a.close(),s&&c()},open(){u||a.open()},toggle(d){u||a.toggle(d)},isFocused:l,setFocused:i,...o}}function x({autoComplete:e,name:l,isDisabled:i,isRequired:a,selectRef:r},n,o){const{visuallyHiddenProps:u}=pe();return de(r,n.selectedKeys,n.setSelectedKeys),ue({validationBehavior:"native",focus:()=>{var s;return(s=o.current)==null?void 0:s.focus()}},n,r),{containerProps:{...u,"aria-hidden":!0,"data-react-aria-prevent-focus":!0,"data-a11y-ignore":"aria-hidden-focus"},inputProps:{style:{display:"none"}},selectProps:{tabIndex:-1,autoComplete:e,disabled:i,required:a,name:l,value:Array.from(n.selectedKeys).map(s=>s.toString()),onChange:s=>n.setSelectedKeys(s.target.value),multiple:!0}}}function K(e){const{state:l,triggerRef:i,name:a,isDisabled:r}=e,n=`${e.label}-hidden`,o=y.useRef(null),{containerProps:u,selectProps:s}=x({...e,selectRef:o},l,i);return l.collection.size<=300?t.jsx("div",{...u,"data-testid":"hidden-select-container",children:t.jsxs("label",{children:[n,t.jsxs("select",{...s,ref:o,children:[t.jsx("option",{}),[...l.collection.getKeys()].map(c=>{const d=l.collection.getItem(c);return d&&d.type==="item"?t.jsx("option",{value:d.key,children:d.textValue},d.key):null})]})]})}):a?t.jsx("input",{type:"hidden",autoComplete:s.autoComplete,name:a,disabled:r,value:Array.from(l.selectedKeys).map(c=>c.toString())??[""]}):null}try{x.displayName="useHiddenMultiSelect",x.__docgenInfo={description:"Provides the behavior and accessibility implementation for a hidden `<select>` element, which\ncan be used in combination with `useSelect` to support browser form autofill, mobile form\nnavigation, and native HTML form submission.",displayName:"useHiddenMultiSelect",props:{}}}catch{}try{K.displayName="HiddenMultiSelect",K.__docgenInfo={description:"Renders a hidden native `<select>` element, which can be used to support browser\nform autofill, mobile form navigation, and native form submission.",displayName:"HiddenMultiSelect",props:{state:{defaultValue:null,description:"State for the select.",name:"state",required:!0,type:{name:"MultiSelectState<T>"}},triggerRef:{defaultValue:null,description:"A ref to the trigger element.",name:"triggerRef",required:!0,type:{name:"RefObject<FocusableElement>"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The text label for the select.",name:"label",required:!1,type:{name:"ReactNode"}},name:{defaultValue:null,description:"HTML form input name.",name:"name",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Sets the disabled state of the select and input.",name:"isDisabled",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Sets the required state of the select and input.",name:"isRequired",required:!1,type:{name:"boolean"}}}}}catch{}const T=({state:{selectedItems:e},isDisabled:l,parentWidth:i,onClear:a,triggerRef:r,isClearable:n})=>t.jsxs("div",{className:h.selectValueTag,"data-disabled":l||void 0,children:[t.jsx("span",{className:h.truncate,style:{maxWidth:i-92},children:e!=null&&e.length&&e.length>1?`${e.length} valda`:e==null?void 0:e[0].textValue}),n&&t.jsx("button",{disabled:l,"aria-label":"Rensa alla",className:h.clearButton,onClick:()=>{var o;a(),(o=r==null?void 0:r.current)==null||o.focus()},children:t.jsx(he,{width:20,height:20})})]});try{T.displayName="MultiSelectValueTag",T.__docgenInfo={description:"",displayName:"MultiSelectValueTag",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"MultiSelectState<ListBoxOption>"}},parentWidth:{defaultValue:null,description:"",name:"parentWidth",required:!0,type:{name:"number"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!0,type:{name:"() => void"}},triggerRef:{defaultValue:null,description:"",name:"triggerRef",required:!0,type:{name:"MutableRefObject<HTMLButtonElement>"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The contents of the collection.",name:"children",required:!0,type:{name:"CollectionChildren<ListBoxOption>"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the field (uncontrolled).",name:"defaultOpen",required:!1,type:{name:"boolean"}},excludeFromTabOrder:{defaultValue:null,description:"",name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!0,type:{name:"ListBoxOption[]"}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isDisabled:{defaultValue:null,description:"Whether the field is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},isOpen:{defaultValue:null,description:"Sets the open state of the field (controlled).",name:"isOpen",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},selectionMode:{defaultValue:{value:"'single'"},description:"The type of selection that is allowed in the collection.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},isInvalid:{defaultValue:null,description:"The selection is valid or not",name:"isInvalid",required:!1,type:{name:"boolean"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},isRequired:{defaultValue:null,description:"Whether the field is required.",name:"isRequired",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name of the field, for uncontrolled use",name:"name",required:!1,type:{name:"string"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},size:{defaultValue:{value:"'large'"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},shouldFlip:{defaultValue:{value:"true"},description:"Whether the menu should automatically flip direction when space is limited.",name:"shouldFlip",required:!1,type:{name:"boolean"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"(keys: Selection) => void"}},isLoading:{defaultValue:null,description:"Whether the items are currently loading.",name:"isLoading",required:!1,type:{name:"boolean"}},onLoadMore:{defaultValue:null,description:"Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",name:"onLoadMore",required:!1,type:{name:"() => any"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onOpenChange:{defaultValue:null,description:"Handler that is called when the overlay's open state changes.",name:"onOpenChange",required:!1,type:{name:"(isOpen: boolean) => void"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: unknown) => true | ValidationError"}}}}}catch{}const C=({autoFocus:e,excludeFromTabOrder:l,isDisabled:i,size:a="large",isOpen:r,isInvalid:n,selectionMode:o,state:{selectedItems:u},placeholder:s,children:c,triggerRef:d,...p})=>{const{buttonProps:b}=fe({autoFocus:e,excludeFromTabOrder:l,isDisabled:i,...p},d),g=o==="multiple";return t.jsxs("div",{className:h.triggerContainer,"data-disabled":i||void 0,children:[t.jsxs("button",{...b,autoFocus:e,className:$(h.trigger,{[h.medium]:a==="medium"}),"data-disabled":i||void 0,"data-invalid":n||void 0,"data-open":r||void 0,ref:d,type:"button",children:[g&&!u?t.jsx("span",{children:s}):null,g?null:t.jsx("span",{children:u?u[0].textValue:s}),t.jsx("div",{className:h.icon,"aria-hidden":"true",children:t.jsx(ye,{size:20})})]}),c]})};try{C.displayName="SelectTrigger",C.__docgenInfo={description:"",displayName:"SelectTrigger",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"MultiSelectState<ListBoxOption>"}},triggerRef:{defaultValue:null,description:"",name:"triggerRef",required:!0,type:{name:"MutableRefObject<HTMLButtonElement>"}},isDisabled:{defaultValue:null,description:"Whether the field is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether the field is required.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"The selection is valid or not",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: unknown) => true | ValidationError"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"(e: KeyboardEvent) => void"}},excludeFromTabOrder:{defaultValue:null,description:"",name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name of the field, for uncontrolled use",name:"name",required:!1,type:{name:"string"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!0,type:{name:"ListBoxOption[]"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},selectionMode:{defaultValue:{value:"'single'"},description:"The type of selection that is allowed in the collection.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"(keys: Selection) => void"}},isOpen:{defaultValue:null,description:"Sets the open state of the field (controlled).",name:"isOpen",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the field (uncontrolled).",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Handler that is called when the overlay's open state changes.",name:"onOpenChange",required:!1,type:{name:"(isOpen: boolean) => void"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"large"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},shouldFlip:{defaultValue:{value:"true"},description:"Whether the menu should automatically flip direction when space is limited.",name:"shouldFlip",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Whether the items are currently loading.",name:"isLoading",required:!1,type:{name:"boolean"}},onLoadMore:{defaultValue:null,description:"Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",name:"onLoadMore",required:!1,type:{name:"() => any"}},children:{defaultValue:null,description:"The content to display in the button.",name:"children",required:!1,type:{name:"ReactNode"}},onPress:{defaultValue:null,description:"Handler that is called when the press is released over the target.",name:"onPress",required:!1,type:{name:"(e: PressEvent) => void"}},onPressStart:{defaultValue:null,description:"Handler that is called when a press interaction starts.",name:"onPressStart",required:!1,type:{name:"(e: PressEvent) => void"}},onPressEnd:{defaultValue:null,description:`Handler that is called when a press interaction ends, either
over the target or when the pointer leaves the target.`,name:"onPressEnd",required:!1,type:{name:"(e: PressEvent) => void"}},onPressChange:{defaultValue:null,description:"Handler that is called when the press state changes.",name:"onPressChange",required:!1,type:{name:"(isPressed: boolean) => void"}},onPressUp:{defaultValue:null,description:`Handler that is called when a press is released over the target, regardless of
whether it started on the target or not.`,name:"onPressUp",required:!1,type:{name:"(e: PressEvent) => void"}},onClick:{defaultValue:null,description:"**Not recommended – use `onPress` instead.** `onClick` is an alias for `onPress`\nprovided for compatibility with other libraries. `onPress` provides \nadditional event details for non-mouse interactions.",name:"onClick",required:!1,type:{name:"(e: MouseEvent<FocusableElement, MouseEvent>) => void"}},href:{defaultValue:null,description:'A URL to link to if elementType="a".',name:"href",required:!1,type:{name:"string"}},target:{defaultValue:null,description:"The target window for the link.",name:"target",required:!1,type:{name:"string"}},rel:{defaultValue:null,description:"The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",name:"rel",required:!1,type:{name:"string"}},elementType:{defaultValue:{value:"'button'"},description:"The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",name:"elementType",required:!1,type:{name:'JSXElementConstructor<any> | "button"'}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "dialog" | "true" | "false" | "grid" | "listbox" | "menu" | "tree"'}},"aria-controls":{defaultValue:null,description:"Identifies the element (or elements) whose contents or presence are controlled by the current element.",name:"aria-controls",required:!1,type:{name:"string"}},"aria-pressed":{defaultValue:null,description:'Indicates the current "pressed" state of toggle buttons.',name:"aria-pressed",required:!1,type:{name:'boolean | "true" | "false" | "mixed"'}},"aria-current":{defaultValue:null,description:"Indicates whether this element represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time"'}},type:{defaultValue:{value:"'button'"},description:"The behavior of the button when used in an HTML form.",name:"type",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"submit"'},{value:'"reset"'}]}},preventFocusOnPress:{defaultValue:null,description:`Whether to prevent focus from moving to the button when pressing it.

Caution, this can make the button inaccessible and should only be used when alternative keyboard interaction is provided,
such as ComboBox's MenuTrigger or a NumberField's increment/decrement control.`,name:"preventFocusOnPress",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}}}}}catch{}const V=({state:e,errorMessage:l})=>t.jsx(be.Provider,{value:{...e.displayValidation},children:t.jsx(ve,{children:l})});try{V.displayName="SelectFieldError",V.__docgenInfo={description:"",displayName:"SelectFieldError",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"MultiSelectState<ListBoxOption>"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The contents of the collection.",name:"children",required:!0,type:{name:"CollectionChildren<ListBoxOption>"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the field (uncontrolled).",name:"defaultOpen",required:!1,type:{name:"boolean"}},excludeFromTabOrder:{defaultValue:null,description:"",name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!0,type:{name:"ListBoxOption[]"}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isDisabled:{defaultValue:null,description:"Whether the field is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},isOpen:{defaultValue:null,description:"Sets the open state of the field (controlled).",name:"isOpen",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},selectionMode:{defaultValue:{value:"'single'"},description:"The type of selection that is allowed in the collection.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},isInvalid:{defaultValue:null,description:"The selection is valid or not",name:"isInvalid",required:!1,type:{name:"boolean"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},isRequired:{defaultValue:null,description:"Whether the field is required.",name:"isRequired",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name of the field, for uncontrolled use",name:"name",required:!1,type:{name:"string"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},size:{defaultValue:{value:"'large'"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},shouldFlip:{defaultValue:{value:"true"},description:"Whether the menu should automatically flip direction when space is limited.",name:"shouldFlip",required:!1,type:{name:"boolean"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"(keys: Selection) => void"}},isLoading:{defaultValue:null,description:"Whether the items are currently loading.",name:"isLoading",required:!1,type:{name:"boolean"}},onLoadMore:{defaultValue:null,description:"Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",name:"onLoadMore",required:!1,type:{name:"() => any"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onOpenChange:{defaultValue:null,description:"Handler that is called when the overlay's open state changes.",name:"onOpenChange",required:!1,type:{name:"(isOpen: boolean) => void"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: unknown) => true | ValidationError"}}}}}catch{}const Pe=y.forwardRef(({isClearable:e=!0,...l},i)=>{const a={selectionMode:"single",errorPosition:"top",disallowEmptySelection:!e,isClearable:e,size:"large",...l},r=A(i),n=je(a),{labelProps:o,triggerProps:u,valueProps:s,menuProps:c}=Be(a,n,r),{width:d}=me(r.current,{includePadding:!0});return t.jsxs(U,{...a,className:$(h.wrapper,a.className),children:[t.jsx(K,{...a,state:n,triggerRef:r}),a.label&&t.jsx(ge,{...o,"data-disabled":a.isDisabled||void 0,children:a.label}),a.description&&t.jsx(Ve,{slot:"description",children:a.description}),a.errorPosition==="top"&&t.jsx(V,{...a,state:n}),t.jsx(C,{...a,...u,isInvalid:n.displayValidation.isInvalid,triggerRef:r,state:n,children:a.selectionMode==="multiple"&&n.selectedItems?t.jsx("span",{...s,children:t.jsx(T,{...a,state:n,parentWidth:d,onClear:()=>n.selectionManager.clearSelection(),triggerRef:r})}):null}),a.errorPosition==="bottom"&&t.jsx(V,{...a,state:n}),t.jsxs(Z,{isOpen:n.isOpen,onOpenChange:p=>{p||n.close()},triggerRef:r,style:{width:d},children:[a.isSelectableAll&&t.jsxs(S,{onClick:()=>n.selectionManager.toggleSelectAll(),children:[t.jsx("div",{className:h.checkboxContainer,children:t.jsx(O,{isSelected:n.selectionManager.isSelectAll,isIndeterminate:!n.selectionManager.isSelectAll&&!n.selectionManager.isEmpty,isReadOnly:!0,excludeFromTabOrder:!0})}),t.jsx("span",{children:"Select All"})]}),t.jsx(w,{...c,state:n})]}),a.showTags&&!!n.selectedItems&&t.jsx(D,{"aria-label":"Selected Items",selectionBehavior:"toggle",onRemove:p=>n.selectionManager.toggleSelection(Array.from(p)[0]),className:h.tagGroup,children:t.jsx(R,{items:n.selectedItems,children:p=>t.jsx(z,{textValue:p.textValue,id:p.key,dismissable:!0,isDisabled:a.isDisabled,children:p.textValue},p.key)})})]})}),_=y.forwardRef(({options:e,...l},i)=>t.jsx(Pe,{...l,items:e,ref:i,children:a=>a.children?t.jsx(Se,{items:a.children,title:a.name,children:r=>t.jsx(B,{textValue:r.textValue,children:r.name})},a.name):t.jsx(B,{textValue:a.textValue,children:a.name})}));_.displayName="Select";try{_.displayName="Select",_.__docgenInfo={description:"",displayName:"Select",props:{isDisabled:{defaultValue:null,description:"Whether the field is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether the field is required.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"The selection is valid or not",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: unknown) => true | ValidationError"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"(e: KeyboardEvent) => void"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"(e: KeyboardEvent) => void"}},excludeFromTabOrder:{defaultValue:null,description:"",name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name of the field, for uncontrolled use",name:"name",required:!1,type:{name:"string"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},selectionMode:{defaultValue:{value:"'single'"},description:"The type of selection that is allowed in the collection.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"(keys: Selection) => void"}},isOpen:{defaultValue:null,description:"Sets the open state of the field (controlled).",name:"isOpen",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the field (uncontrolled).",name:"defaultOpen",required:!1,type:{name:"boolean"}},onOpenChange:{defaultValue:null,description:"Handler that is called when the overlay's open state changes.",name:"onOpenChange",required:!1,type:{name:"(isOpen: boolean) => void"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},size:{defaultValue:{value:"'large'"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},shouldFlip:{defaultValue:{value:"true"},description:"Whether the menu should automatically flip direction when space is limited.",name:"shouldFlip",required:!1,type:{name:"boolean"}},isLoading:{defaultValue:null,description:"Whether the items are currently loading.",name:"isLoading",required:!1,type:{name:"boolean"}},onLoadMore:{defaultValue:null,description:"Handler that is called when more items should be loaded, e.g. while scrolling near the bottom.",name:"onLoadMore",required:!1,type:{name:"() => any"}},options:{defaultValue:null,description:"Item objects in the collection.",name:"options",required:!0,type:{name:"ListBoxOption[]"}}}}}catch{}export{_ as S};
