import{j as o}from"./jsx-runtime-BYYWji4R.js";import{r as f}from"./index-ClcD9ViR.js";import{$ as g,C as p,s as V,a as q}from"./Checkbox-BHrbYipv.js";import{$ as A,F as x}from"./FieldError-Bc4GcTNT.js";import{a as S,L as I}from"./Label-D0T-hakd.js";import{a as $,d as P}from"./useFormValidation-Cwkq_bn0.js";import{$ as R}from"./useControlledState-H1tiOFpU.js";import{u as C}from"./useLocalizedStringFormatter-1I2iWIMg.js";import{b as E}from"./utils-BLyg3OOq.js";import{c as F,e as T}from"./useFocusRing-eGNMqT99.js";import{$ as w}from"./useField-BBXNKLtY.js";import{T as M}from"./Text-ObKd9RkE.js";function D(e,a){let{isDisabled:i,name:c,validationBehavior:d="aria"}=e,{isInvalid:r,validationErrors:s,validationDetails:u}=a.displayValidation,{labelProps:t,fieldProps:l,descriptionProps:n,errorMessageProps:m}=w({...e,labelElementType:"span",isInvalid:r,errorMessage:e.errorMessage||s});g.set(a,{name:c,descriptionId:n.id,errorMessageId:m.id,validationBehavior:d});let b=F(e,{labelable:!0}),{focusWithinProps:y}=T({onBlurWithin:e.onBlur,onFocusWithin:e.onFocus,onFocusWithinChange:e.onFocusChange});return{groupProps:E(b,{role:"group","aria-disabled":i||void 0,...l,...y}),labelProps:t,descriptionProps:n,errorMessageProps:m,isInvalid:r,validationErrors:s,validationDetails:u}}function k(e={}){let[a,i]=R(e.value,e.defaultValue||[],e.onChange),c=!!e.isRequired&&a.length===0,d=f.useRef(new Map),r=$({...e,value:a}),s=r.displayValidation.isInvalid;var u;return{...r,value:a,setValue(l){e.isReadOnly||e.isDisabled||i(l)},isDisabled:e.isDisabled||!1,isReadOnly:e.isReadOnly||!1,isSelected(l){return a.includes(l)},addValue(l){e.isReadOnly||e.isDisabled||a.includes(l)||i(a.concat(l))},removeValue(l){e.isReadOnly||e.isDisabled||a.includes(l)&&i(a.filter(n=>n!==l))},toggleValue(l){e.isReadOnly||e.isDisabled||(a.includes(l)?i(a.filter(n=>n!==l)):i(a.concat(l)))},setInvalid(l,n){let m=new Map(d.current);n.isInvalid?m.set(l,n):m.delete(l),d.current=m,r.updateValidation(P(...m.values()))},validationState:(u=e.validationState)!==null&&u!==void 0?u:s?"invalid":null,isInvalid:s,isRequired:c}}const N=(e,{value:a})=>{const i=f.Children.toArray(e).filter(t=>f.isValidElement(t)&&t.type===p),c=f.Children.count(i),d=f.Children.toArray(e).filter(t=>f.isValidElement(t)).filter(t=>!!t&&t.type===p).map(t=>t.props.value),r=a.length===0,s=a.length===c;return{allSelected:s,someSelected:!r&&!s,checkboxValues:d}},h=({state:e,errorMessage:a})=>o.jsx(A.Provider,{value:e.displayValidation,children:o.jsx(x,{children:a})});try{h.displayName="CheckboxGroupFieldError",h.__docgenInfo={description:"",displayName:"CheckboxGroupFieldError",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"CheckboxGroupState"}},showSelectAll:{defaultValue:null,description:"",name:"showSelectAll",required:!1,type:{name:"boolean"}},selectAllLabel:{defaultValue:null,description:"",name:"selectAllLabel",required:!1,type:{name:"string"}},errorPosition:{defaultValue:null,description:"",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},popover:{defaultValue:null,description:"",name:"popover",required:!1,type:{name:"InfoPopoverProps"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string[]"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"(value: string[]) => void"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"A description for the field. Provides a hint such as specific requirements for what to choose.",name:"description",required:!1,type:{name:"ReactNode"}},errorMessage:{defaultValue:null,description:"An error message for the field.",name:"errorMessage",required:!1,type:{name:"ReactNode | ((v: ValidationResult) => ReactNode)"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: string[]) => true | ValidationError"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}}}}}catch{}const W={"en-US":{selectAll:"Select all"},"en-GB":{selectAll:"Select all"},"es-ES":{selectAll:"Seleccionar todos"},"es-MX":{selectAll:"Seleccionar todos"},"fr-FR":{selectAll:"Tout sélectionner"},"fr-CA":{selectAll:"Tout sélectionner"},"de-DE":{selectAll:"Alle auswählen"},"it-IT":{selectAll:"Seleziona tutti"},"pt-PT":{selectAll:"Selecionar todos"},"pt-BR":{selectAll:"Selecionar todos"},"ru-RU":{selectAll:"Выбрать все"},"zh-CN":{selectAll:"全选"},"zh-TW":{selectAll:"全選"},"ja-JP":{selectAll:"すべて選択"},"ko-KR":{selectAll:"전체 선택"},"ar-SA":{selectAll:"تحديد الكل"},"hi-IN":{selectAll:"सभी चुनें"},"tr-TR":{selectAll:"Tümünü seç"},"nl-NL":{selectAll:"Alles selecteren"},"sv-SE":{selectAll:"Välj alla"},"fi-FI":{selectAll:"Valitse kaikki"},"no-NO":{selectAll:"Velg alle"},"da-DK":{selectAll:"Vælg alle"},"pl-PL":{selectAll:"Zaznacz wszystkie"},"cs-CZ":{selectAll:"Vybrat vše"},"he-IL":{selectAll:"בחר הכול"},"th-TH":{selectAll:"เลือกทั้งหมด"},"vi-VN":{selectAll:"Chọn tất cả"},"id-ID":{selectAll:"Pilih semua"},"uk-UA":{selectAll:"Вибрати все"}};function v(e){const a=k(e),i=C(W),{groupProps:c,labelProps:d,descriptionProps:r}=D(e,a),{allSelected:s,someSelected:u,checkboxValues:t}=N(e.children,a),l=n=>{a.setValue(n?t:[])};return o.jsxs("div",{...c,className:V.checkboxGroup,children:[o.jsx(S,{popover:e.popover,children:e.label&&o.jsx(I,{...d,children:e.label})}),e.description&&o.jsx(M,{slot:"description",...r,children:e.description}),e.errorPosition==="top"&&o.jsx(h,{...e,state:a}),e.showSelectAll&&o.jsx(p,{isSelected:s,isIndeterminate:u,onChange:l,children:e.selectAllLabel||i.format("selectAll")}),o.jsx(q.Provider,{value:a,children:e.children}),e.errorPosition==="bottom"&&o.jsx(h,{...e,state:a})]})}try{v.displayName="CheckboxGroup",v.__docgenInfo={description:"",displayName:"CheckboxGroup",props:{showSelectAll:{defaultValue:null,description:"",name:"showSelectAll",required:!1,type:{name:"boolean"}},selectAllLabel:{defaultValue:null,description:"",name:"selectAllLabel",required:!1,type:{name:"string"}},errorPosition:{defaultValue:null,description:"",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},popover:{defaultValue:null,description:"",name:"popover",required:!1,type:{name:"InfoPopoverProps"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string[]"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"(value: string[]) => void"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"A description for the field. Provides a hint such as specific requirements for what to choose.",name:"description",required:!1,type:{name:"ReactNode"}},errorMessage:{defaultValue:null,description:"An error message for the field.",name:"errorMessage",required:!1,type:{name:"ReactNode | ((v: ValidationResult) => ReactNode)"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: string[]) => true | ValidationError"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}}}}}catch{}export{v as C};
