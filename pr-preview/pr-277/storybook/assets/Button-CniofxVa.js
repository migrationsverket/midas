import{j as n}from"./jsx-runtime-DtgEGaVE.js";import{$ as m}from"./Button-BzJaSZRM.js";import{c as f}from"./clsx-B-dksMZM.js";const p='"../theme/tokens.css"',h="#143c50",y="#25607f",b="#4289ad",g='"Inter", sans-serif',v="1rem",_="500",w="#ffffff",R="#bfbfbf",V="#f2f2f2",q="#e6e6e6",S="#000000",B="undefined",N="(max-width: 767px)",P="0 0 0 2px #ffffff, 0 0 0 4px #000000",T="#e62323",x="#b31b1b",A="#801313",z="_button_r914l_4",k="_primary_r914l_41",I="_secondary_r914l_47",j="_tertiary_r914l_71",C="_iconBtn_r914l_93",W="_danger_r914l_114",E="_iconRight_r914l_136",$="_fullwidth_r914l_140",L="_small_r914l_144",e={tokens:p,blue150:h,blue130:y,blue90:b,display:g,desktopSize:v,mediumWeight:_,white:w,gray50:R,gray10:V,gray20:q,black:S,medium:B,smBreakpoint:N,focus:P,signalRed100:T,signalRed130:x,signalRed150:A,button:z,primary:k,secondary:I,tertiary:j,iconBtn:C,danger:W,iconRight:E,fullwidth:$,small:L},r=({variant:t="primary",fullwidth:s,className:l,iconPlacement:d,size:a,icon:o,iconSize:u,...i})=>{const c=a==="small"?14:u||20;return n.jsx(m,{className:f(e.button,t==="primary"&&e.primary,t==="secondary"&&e.secondary,t==="tertiary"&&e.tertiary,t==="danger"&&e.danger,t==="icon"&&e.iconBtn,s&&e.fullwidth,a==="small"&&e.small,d==="right"&&e.iconRight,l),...i,children:n.jsxs(n.Fragment,{children:[o&&n.jsx(o,{"aria-hidden":!0,size:c}),i.children]})})};try{r.displayName="Button",r.__docgenInfo={description:"Button to perform various actions.",displayName:"Button",props:{variant:{defaultValue:{value:"primary"},description:"Primary button is used as a positive action in a flow. Always use one primary button and never a seconday button on it's own. When using just an icon you must pass an aria-label",name:"variant",required:!1,type:{name:"enum",value:[{value:'"icon"'},{value:'"primary"'},{value:'"secondary"'},{value:'"tertiary"'},{value:'"danger"'}]}},fullwidth:{defaultValue:{value:"false"},description:"Adds width: 100%; for the button to span entire width of parent",name:"fullwidth",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"Choose between different button sizes",name:"size",required:!1,type:{name:'"small"'}},icon:{defaultValue:null,description:`Add an icon from lucide-react
@see {@link https://lucide.dev/icons/}`,name:"icon",required:!1,type:{name:"LucideIcon"}},iconSize:{defaultValue:null,description:"Adjust icon size",name:"iconSize",required:!1,type:{name:"number"}},iconPlacement:{defaultValue:null,description:"Display your icon on the left och right side of the button text",name:"iconPlacement",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"(ReactNode | ((values: ButtonRenderProps & { defaultChildren: ReactNode; }) => ReactNode)) & (ReactNode | ((values: ButtonRenderProps & { ...; }) => ReactNode))"}},form:{defaultValue:null,description:"The `<form>` element to associate the button with.\nThe value of this attribute must be the id of a `<form>` in the same document.",name:"form",required:!1,type:{name:"string"}},formAction:{defaultValue:null,description:`The URL that processes the information submitted by the button.
Overrides the action attribute of the button's form owner.`,name:"formAction",required:!1,type:{name:"string"}},formEncType:{defaultValue:null,description:"Indicates how to encode the form data that is submitted.",name:"formEncType",required:!1,type:{name:"string"}},formMethod:{defaultValue:null,description:"Indicates the HTTP method used to submit the form.",name:"formMethod",required:!1,type:{name:"string"}},formNoValidate:{defaultValue:null,description:"Indicates that the form is not to be validated when it is submitted.",name:"formNoValidate",required:!1,type:{name:"boolean"}},formTarget:{defaultValue:null,description:"Overrides the target attribute of the button's form owner.",name:"formTarget",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"Submitted as a pair with the button's value as part of the form data.",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value associated with the button's name when it's submitted with the form data.",name:"value",required:!1,type:{name:"string"}},isPending:{defaultValue:null,description:`Whether the button is in a pending state. This disables press and hover events
while retaining focusability, and announces the pending state to screen readers.`,name:"isPending",required:!1,type:{name:"boolean"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: ButtonRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: ButtonRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}}}}}catch{}export{r as B};
