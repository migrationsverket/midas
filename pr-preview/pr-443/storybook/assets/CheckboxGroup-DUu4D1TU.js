import{j as l}from"./jsx-runtime-DtgEGaVE.js";import{R as n}from"./index-BbAIUH2N.js";import{$ as A,s as h,a as S,C}from"./Checkbox-DdwZc1Dj.js";import{$ as j}from"./Group-BegkCWIz.js";import{L as E}from"./Label-DjHNQKaV.js";import{T}from"./Text-DTW4hkTA.js";import{F as v}from"./FieldError-DCgcqB00.js";const b=({label:o,description:d,errorMessage:u,showSelectAll:g,children:m,errorPosition:c="top",...y})=>{const[s,a]=n.useState(),V=()=>{const e=n.useContext(S),r=n.Children.toArray(m).filter(n.isValidElement).map(i=>i.props.value),q=()=>s!=="all"?(a("all"),e==null?void 0:e.setValue(["toggleAll",...r])):(a("none"),e==null?void 0:e.setValue([]));return n.useEffect(()=>{var p,f;const i=r.length,x=r.length+1,t=((p=e==null?void 0:e.value)==null?void 0:p.length)||0;t===0&&a("none"),t>0&&t<i&&a("some"),t!==x&&(e==null||e.removeValue("toggleAll")),t===i&&!((f=e==null?void 0:e.value)!=null&&f.includes("toggleAll"))&&(e==null||e.addValue("toggleAll"),a("all"))},[r.length,e==null?void 0:e.value]),l.jsx(C,{value:"toggleAll",isSelected:s==="all",isIndeterminate:s==="some",onChange:()=>q(),children:"VÃ¤lj alla"})};return l.jsxs(A,{className:h.checkboxGroup,...y,children:[l.jsx(E,{variant:"label-02",children:o}),d&&l.jsx(T,{slot:"description",children:d}),c==="top"&&l.jsx(v,{children:u}),l.jsxs(j,{className:h.wrap,children:[g&&l.jsx(V,{}),m]}),c==="bottom"&&l.jsx(v,{children:u})]})};try{b.displayName="CheckboxGroup",b.__docgenInfo={description:"",displayName:"CheckboxGroup",props:{label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},showSelectAll:{defaultValue:null,description:"",name:"showSelectAll",required:!1,type:{name:"boolean"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},errorPosition:{defaultValue:{value:"top"},description:"",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string[]"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"(value: string[]) => void"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: string[]) => true | ValidationError"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: CheckboxGroupRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: CheckboxGroupRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string"}}}}}catch{}export{b as C};
