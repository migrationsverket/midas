import{j as I}from"./jsx-runtime-DtgEGaVE.js";import{$ as B}from"./Group-DjMbdBA7.js";import{o as F,n as A,d as V,p as E,f as L,j as k,$ as _,z as W,A as G,c as M,C as O,h as j,J as U,B as z,b as K,a as J}from"./useFocusable-CksQMUge.js";import{e as Q,f as X,d as Y,a as Z,b as ee}from"./Form-00Vp9xmy.js";import{b as ae,$ as te}from"./useField-DBAwgFPt.js";import{$ as le}from"./Text-CLew4G9p.js";import{r as R,R as P}from"./index-BbAIUH2N.js";import{$ as ie}from"./useControlledState-DGyHFLi9.js";import{$ as ne}from"./FocusScope-DAbLQFiD.js";import{$ as re}from"./context-CKCbQYCl.js";import{a as de}from"./VisuallyHidden-DVuqn1m6.js";import{I as se}from"./TextField-CYtIriiY.js";const N=new WeakMap;function oe(a,e,l){let{value:i,children:r,"aria-label":n,"aria-labelledby":d}=a;const t=a.isDisabled||e.isDisabled;let f=r!=null,c=n!=null||d!=null;!f&&!c&&console.warn("If you do not provide children, you must specify an aria-label for accessibility");let s=e.selectedValue===i,h=w=>{w.stopPropagation(),e.setSelectedValue(i)},{pressProps:v,isPressed:y}=F({isDisabled:t}),{pressProps:$,isPressed:m}=F({isDisabled:t,onPress(){e.setSelectedValue(i)}}),{focusableProps:S}=A(V(a,{onFocus:()=>e.setLastFocusedValue(i)}),l),x=V(v,S),q=E(a,{labelable:!0}),b=-1;e.selectedValue!=null?e.selectedValue===i&&(b=0):(e.lastFocusedValue===i||e.lastFocusedValue==null)&&(b=0),t&&(b=void 0);let{name:p,descriptionId:o,errorMessageId:g,validationBehavior:u}=N.get(e);return Q(l,e.selectedValue,e.setSelectedValue),X({validationBehavior:u},e,l),{labelProps:V($,{onClick:w=>w.preventDefault()}),inputProps:V(q,{...x,type:"radio",name:p,tabIndex:b,disabled:t,required:e.isRequired&&u==="native",checked:s,value:i,onChange:h,"aria-describedby":[a["aria-describedby"],e.isInvalid?g:null,o].filter(Boolean).join(" ")||void 0}),isDisabled:t,isSelected:s,isPressed:y||m}}function ue(a,e){let{name:l,isReadOnly:i,isRequired:r,isDisabled:n,orientation:d="vertical",validationBehavior:t="aria"}=a,{direction:f}=re(),{isInvalid:c,validationErrors:s,validationDetails:h}=e.displayValidation,{labelProps:v,fieldProps:y,descriptionProps:$,errorMessageProps:m}=ae({...a,labelElementType:"span",isInvalid:e.isInvalid,errorMessage:a.errorMessage||s}),S=E(a,{labelable:!0}),{focusWithinProps:x}=L({onBlurWithin(p){var o;(o=a.onBlur)===null||o===void 0||o.call(a,p),e.selectedValue||e.setLastFocusedValue(null)},onFocusWithin:a.onFocus,onFocusWithinChange:a.onFocusChange}),q=p=>{let o;switch(p.key){case"ArrowRight":f==="rtl"&&d!=="vertical"?o="prev":o="next";break;case"ArrowLeft":f==="rtl"&&d!=="vertical"?o="next":o="prev";break;case"ArrowDown":o="next";break;case"ArrowUp":o="prev";break;default:return}p.preventDefault();let g=ne(p.currentTarget,{from:p.target}),u;o==="next"?(u=g.nextNode(),u||(g.currentNode=p.currentTarget,u=g.firstChild())):(u=g.previousNode(),u||(g.currentNode=p.currentTarget,u=g.lastChild())),u&&(u.focus(),e.setSelectedValue(u.value))},b=k(l);return N.set(e,{name:b,descriptionId:$.id,errorMessageId:m.id,validationBehavior:t}),{radioGroupProps:V(S,{role:"radiogroup",onKeyDown:q,"aria-invalid":e.isInvalid||void 0,"aria-errormessage":a["aria-errormessage"],"aria-readonly":i||void 0,"aria-required":r||void 0,"aria-disabled":n||void 0,"aria-orientation":d,...y,...x}),labelProps:v,descriptionProps:$,errorMessageProps:m,isInvalid:c,validationErrors:s,validationDetails:h}}let ce=Math.round(Math.random()*1e10),fe=0;function pe(a){let e=R.useMemo(()=>a.name||`radio-group-${ce}-${++fe}`,[a.name]);var l;let[i,r]=ie(a.value,(l=a.defaultValue)!==null&&l!==void 0?l:null,a.onChange),[n,d]=R.useState(null),t=Y({...a,value:i}),f=s=>{!a.isReadOnly&&!a.isDisabled&&(r(s),t.commitValidation())},c=t.displayValidation.isInvalid;return{...t,name:e,selectedValue:i,setSelectedValue:f,lastFocusedValue:n,setLastFocusedValue:d,isDisabled:a.isDisabled||!1,isReadOnly:a.isReadOnly||!1,isRequired:a.isRequired||!1,validationState:a.validationState||(c?"invalid":null),isInvalid:c}}const me=R.createContext(null),be=R.createContext(null),T=R.createContext(null),he=R.forwardRef(function(e,l){[e,l]=_(e,l,me);let{validationBehavior:i}=W(Z)||{};var r,n;let d=(n=(r=e.validationBehavior)!==null&&r!==void 0?r:i)!==null&&n!==void 0?n:"native",t=pe({...e,validationBehavior:d}),[f,c]=G(),{radioGroupProps:s,labelProps:h,descriptionProps:v,errorMessageProps:y,...$}=ue({...e,label:c,validationBehavior:d},t),m=M({...e,values:{orientation:e.orientation||"vertical",isDisabled:t.isDisabled,isReadOnly:t.isReadOnly,isRequired:t.isRequired,isInvalid:t.isInvalid,state:t},defaultClassName:"react-aria-RadioGroup"});return P.createElement("div",{...s,...m,ref:l,slot:e.slot||void 0,"data-orientation":e.orientation||"vertical","data-invalid":t.isInvalid||void 0,"data-disabled":t.isDisabled||void 0,"data-readonly":t.isReadOnly||void 0,"data-required":t.isRequired||void 0},P.createElement(O,{values:[[T,t],[te,{...h,ref:f,elementType:"span"}],[le,{slots:{description:v,errorMessage:y}}],[ee,$]]},m.children))}),ve=R.forwardRef(function(e,l){let{inputRef:i=null,...r}=e;[e,l]=_(r,l,be);let n=P.useContext(T),d=j(U(i,e.inputRef!==void 0?e.inputRef:null)),{labelProps:t,inputProps:f,isSelected:c,isDisabled:s,isPressed:h}=oe({...z(e),children:typeof e.children=="function"?!0:e.children},n,d),{isFocused:v,isFocusVisible:y,focusProps:$}=K(),m=s||n.isReadOnly,{hoverProps:S,isHovered:x}=J({...e,isDisabled:m}),q=M({...e,defaultClassName:"react-aria-Radio",values:{isSelected:c,isPressed:h,isHovered:x,isFocused:v,isFocusVisible:y,isDisabled:s,isReadOnly:n.isReadOnly,isInvalid:n.isInvalid,isRequired:n.isRequired}}),b=E(e);return delete b.id,P.createElement("label",{...V(b,t,S,q),ref:l,"data-selected":c||void 0,"data-pressed":h||void 0,"data-hovered":x||void 0,"data-focused":v||void 0,"data-focus-visible":y||void 0,"data-disabled":s||void 0,"data-readonly":n.isReadOnly||void 0,"data-invalid":n.isInvalid||void 0,"data-required":n.isRequired||void 0},P.createElement(de,{elementType:"span"},P.createElement("input",{...V(f,$),ref:d})),q.children)}),ye='"../theme/tokens.css"',$e='"Inter", sans-serif',ge="undefined",Ve="#1f1f1f",Re="#000000",xe="#143c50",qe="#bfbfbf",Pe="#b3b3b3",Se="#ffdfdf",Ie="#e62323",we="undefined",De="#1f1f1f",Ee="undefined",Fe="(max-width: 767px)",Ce="0 0 0 2px #ffffff, 0 0 0 4px #000000",He="(min-width: 768px)",_e="#b3b3b3",Me="_radioGroup_197q1_4",Ne="_wrap_197q1_17",Te="_radio_197q1_4",D={tokens:ye,display:$e,inputLabel:ge,inputText:Ve,black:Re,blue150:xe,gray50:qe,gray60:Pe,signalRed10:Se,signalRed100:Ie,medium:we,gray150:De,regular:Ee,smBreakpoint:Fe,focus:Ce,mdBreakpoint:He,borderSecondary:_e,radioGroup:Me,wrap:Ne,radio:Te},C=({label:a,description:e,errorMessage:l,children:i,...r})=>I.jsx(he,{...r,className:D.radioGroup,children:I.jsx(se,{label:a,description:e,errorMessage:l,children:I.jsx(B,{className:D.wrap,children:i})})}),H=a=>I.jsx(ve,{className:D.radio,...a});try{C.displayName="RadioGroup",C.__docgenInfo={description:"RadioGroup is used to group several radio items together",displayName:"RadioGroup",props:{label:{defaultValue:null,description:"Label for the RadioGroup",name:"label",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"Additional description rendered below the label",name:"description",required:!1,type:{name:"string"}},errorMessage:{defaultValue:null,description:"String to display as error message or function to handle the result and produce the error message",name:"errorMessage",required:!1,type:{name:"string | ((validation: ValidationResult) => string)"}},validationBehavior:{defaultValue:{value:"'native'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: string | null) => true | ValidationError | null)"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string | null"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string | null"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: RadioGroupRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: RadioGroupRenderProps & { defaultClassName: string; }) => string)"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}},orientation:{defaultValue:{value:"'vertical'"},description:"The axis the Radio Button(s) should align with.",name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}}}}}catch{}try{H.displayName="Radio",H.__docgenInfo={description:"Radio item",displayName:"Radio",props:{inputRef:{defaultValue:null,description:"A ref for the HTML input element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement | null>"}},isDisabled:{defaultValue:null,description:`Whether the radio button is disabled or not.
Shows that a selection exists, but is not available in that circumstance.`,name:"isDisabled",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},value:{defaultValue:null,description:`The value of the radio button, used when submitting an HTML form.
See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio#Value).`,name:"value",required:!0,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},onHoverStart:{defaultValue:null,description:"Handler that is called when a hover interaction starts.",name:"onHoverStart",required:!1,type:{name:"((e: HoverEvent) => void)"}},onHoverEnd:{defaultValue:null,description:"Handler that is called when a hover interaction ends.",name:"onHoverEnd",required:!1,type:{name:"((e: HoverEvent) => void)"}},onHoverChange:{defaultValue:null,description:"Handler that is called when the hover state changes.",name:"onHoverChange",required:!1,type:{name:"((isHovering: boolean) => void)"}},children:{defaultValue:null,description:"The children of the component. A function may be provided to alter the children based on component state.",name:"children",required:!1,type:{name:"ReactNode | ((values: RadioRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},className:{defaultValue:null,description:"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.",name:"className",required:!1,type:{name:"string | ((values: RadioRenderProps & { defaultClassName: string; }) => string)"}},style:{defaultValue:null,description:"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.",name:"style",required:!1,type:{name:"CSSProperties | ((values: RadioRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},slot:{defaultValue:null,description:"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.",name:"slot",required:!1,type:{name:"string | null"}}}}}catch{}export{C as R,H as a};
