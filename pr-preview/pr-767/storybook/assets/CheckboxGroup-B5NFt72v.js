import{j as d}from"./jsx-runtime-BYYWji4R.js";import{r as f}from"./index-ClcD9ViR.js";import{$ as g,C as h,s as V,a as q}from"./Checkbox-DTYof62l.js";import{$ as x,F as $}from"./FieldError-BjFojtrn.js";import{a as I,L as P}from"./Label-C-RJccBX.js";import{a as S,d as R}from"./useFormValidation-DmuZGU-W.js";import{$ as C}from"./useControlledState-H1tiOFpU.js";import{b as E}from"./utils-RHx87K0F.js";import{c as F,e as A}from"./useFocusRing-zhkOjX4v.js";import{$ as M}from"./useField-C9GdkJOV.js";import{u as w}from"./useLocalizedStringFormatter-9M_dEwOo.js";import{T as D}from"./Text-BgvnLaBz.js";function T(e,a){let{isDisabled:i,name:c,validationBehavior:o="aria"}=e,{isInvalid:r,validationErrors:s,validationDetails:u}=a.displayValidation,{labelProps:t,fieldProps:l,descriptionProps:n,errorMessageProps:m}=M({...e,labelElementType:"span",isInvalid:r,errorMessage:e.errorMessage||s});g.set(a,{name:c,descriptionId:n.id,errorMessageId:m.id,validationBehavior:o});let b=F(e,{labelable:!0}),{focusWithinProps:y}=A({onBlurWithin:e.onBlur,onFocusWithin:e.onFocus,onFocusWithinChange:e.onFocusChange});return{groupProps:E(b,{role:"group","aria-disabled":i||void 0,...l,...y}),labelProps:t,descriptionProps:n,errorMessageProps:m,isInvalid:r,validationErrors:s,validationDetails:u}}function W(e={}){let[a,i]=C(e.value,e.defaultValue||[],e.onChange),c=!!e.isRequired&&a.length===0,o=f.useRef(new Map),r=S({...e,value:a}),s=r.displayValidation.isInvalid;var u;return{...r,value:a,setValue(l){e.isReadOnly||e.isDisabled||i(l)},isDisabled:e.isDisabled||!1,isReadOnly:e.isReadOnly||!1,isSelected(l){return a.includes(l)},addValue(l){e.isReadOnly||e.isDisabled||a.includes(l)||i(a.concat(l))},removeValue(l){e.isReadOnly||e.isDisabled||a.includes(l)&&i(a.filter(n=>n!==l))},toggleValue(l){e.isReadOnly||e.isDisabled||(a.includes(l)?i(a.filter(n=>n!==l)):i(a.concat(l)))},setInvalid(l,n){let m=new Map(o.current);n.isInvalid?m.set(l,n):m.delete(l),o.current=m,r.updateValidation(R(...m.values()))},validationState:(u=e.validationState)!==null&&u!==void 0?u:s?"invalid":null,isInvalid:s,isRequired:c}}const _=(e,{value:a})=>{const i=f.Children.toArray(e).filter(t=>f.isValidElement(t)&&t.type===h),c=f.Children.count(i),o=f.Children.toArray(e).filter(t=>f.isValidElement(t)).filter(t=>!!t&&t.type===h).map(t=>t.props.value),r=a.length===0,s=a.length===c;return{allSelected:s,someSelected:!r&&!s,checkboxValues:o}},p=({state:e,errorMessage:a})=>d.jsx(x.Provider,{value:e.displayValidation,children:d.jsx($,{children:a})});try{p.displayName="CheckboxGroupFieldError",p.__docgenInfo={description:"",displayName:"CheckboxGroupFieldError",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"CheckboxGroupState"}},showSelectAll:{defaultValue:null,description:"",name:"showSelectAll",required:!1,type:{name:"boolean"}},selectAllLabel:{defaultValue:null,description:"",name:"selectAllLabel",required:!1,type:{name:"string"}},errorPosition:{defaultValue:null,description:"",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},popover:{defaultValue:null,description:"",name:"popover",required:!1,type:{name:"InfoPopoverProps"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string[]"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"(value: string[]) => void"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"A description for the field. Provides a hint such as specific requirements for what to choose.",name:"description",required:!1,type:{name:"ReactNode"}},errorMessage:{defaultValue:null,description:"An error message for the field.",name:"errorMessage",required:!1,type:{name:"ReactNode | ((v: ValidationResult) => ReactNode)"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: string[]) => true | ValidationError"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}}}}}catch{}const j={selectAll:"Select all"},L={selectAll:"VÃ¤lj alla"},N={en:j,sv:L};function v(e){const a=W(e),i=w(N),{groupProps:c,labelProps:o,descriptionProps:r}=T(e,a),{allSelected:s,someSelected:u,checkboxValues:t}=_(e.children,a),l=n=>{a.setValue(n?t:[])};return d.jsxs("div",{...c,className:V.checkboxGroup,children:[d.jsx(I,{popover:e.popover,children:e.label&&d.jsx(P,{...o,children:e.label})}),e.description&&d.jsx(D,{slot:"description",...r,children:e.description}),e.errorPosition==="top"&&d.jsx(p,{...e,state:a}),e.showSelectAll&&d.jsx(h,{isSelected:s,isIndeterminate:u,onChange:l,children:e.selectAllLabel||i.format("selectAll")}),d.jsx(q.Provider,{value:a,children:e.children}),e.errorPosition==="bottom"&&d.jsx(p,{...e,state:a})]})}try{v.displayName="CheckboxGroup",v.__docgenInfo={description:"",displayName:"CheckboxGroup",props:{showSelectAll:{defaultValue:null,description:"",name:"showSelectAll",required:!1,type:{name:"boolean"}},selectAllLabel:{defaultValue:null,description:"",name:"selectAllLabel",required:!1,type:{name:"string"}},errorPosition:{defaultValue:null,description:"",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},popover:{defaultValue:null,description:"",name:"popover",required:!1,type:{name:"InfoPopoverProps"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string[]"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"(value: string[]) => void"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"A description for the field. Provides a hint such as specific requirements for what to choose.",name:"description",required:!1,type:{name:"ReactNode"}},errorMessage:{defaultValue:null,description:"An error message for the field.",name:"errorMessage",required:!1,type:{name:"ReactNode | ((v: ValidationResult) => ReactNode)"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"native"'},{value:'"aria"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"(value: string[]) => true | ValidationError"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"(e: FocusEvent<Element, Element>) => void"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"(isFocused: boolean) => void"}}}}}catch{}export{v as C};
