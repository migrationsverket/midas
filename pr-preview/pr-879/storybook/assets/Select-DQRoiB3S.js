import{e as q,r as S,j as i}from"./iframe-BDUfncI5.js";import{c as _}from"./clsx-Ciqy0D92.js";import{b as B,f as J,l as Q,e as Y}from"./utils-BdWn4l2v.js";import{T as Z,$ as ee,a as le}from"./Tag-CiYr2HGz.js";import{b as ae}from"./Collection-BsBBrYWP.js";import{C as R}from"./Checkbox-DvdTt051.js";import{C as te}from"./check-7QwxE_SW.js";import{L as ne,a as ie,b as re,c as oe}from"./ListBoxSection-DycgAO4_.js";import{u as se}from"./useObserveElement-BM9BJY-p.js";import{X as de}from"./x-CmQJNXTf.js";import{u as L}from"./useLocalizedStringFormatter-BjSGum3D.js";import{$ as ue}from"./useButton-Q9vFKd1n.js";import{C as ce}from"./chevron-down-C2YMfJCp.js";import{$ as me,F as fe}from"./FieldError-ByOU8iFD.js";import{a as pe,L as he}from"./Label-Dbr-F9R-.js";import{b as ye,c as be,a as ve}from"./useFormValidation-DKEZbi5f.js";import{$ as ge}from"./useListState-DvUGfqnk.js";import{b as Ve}from"./OverlayArrow-iKj6X5E9.js";import{$ as qe}from"./useControlledState-uEKJ_5E_.js";import{d as Se,i as we}from"./useFocusRing-gv38ubXg.js";import{$ as Te,a as xe}from"./ListKeyboardDelegate-sFTHhoe2.js";import{h as Ce}from"./SelectionManager-BsvUq4Wn.js";import{$ as Ke}from"./useField-jNwMO_P_.js";import{l as Me}from"./Dialog-B2YvkxzF.js";import{a as ke}from"./VisuallyHidden-Drp88UeM.js";import{T as $e}from"./Text-CooGMdkJ.js";function U(e){return null}U.getCollectionNode=function*(l,t){let{childItems:r,title:a,children:o}=l,n=l.title||l.children,u=l.textValue||(typeof n=="string"?n:"")||l["aria-label"]||"";!u&&(t!=null&&t.suppressTextValueWarning),yield{type:"item",props:l,rendered:n,textValue:u,"aria-label":l["aria-label"],hasChildNodes:Ie(l),*childNodes(){if(r)for(let f of r)yield{type:"item",value:f};else if(a){let f=[];q.Children.forEach(o,c=>{f.push({type:"item",element:c})}),yield*f}}}};function Ie(e){return e.hasChildItems!=null?e.hasChildItems:!!(e.childItems||e.title&&q.Children.count(e.children)>0)}let N=U;function z(e){return null}z.getCollectionNode=function*(l){let{children:t,title:r,items:a}=l;yield{type:"section",props:l,hasChildNodes:!0,rendered:r,"aria-label":l["aria-label"],*childNodes(){if(typeof t=="function"){if(!a)throw new Error("props.children was a function but props.items is missing");for(let o of a)yield{type:"item",value:o,renderer:t}}else{let o=[];q.Children.forEach(t,n=>{o.push({type:"item",element:n})}),yield*o}}}};let Ee=z;const A=new WeakMap;function Fe(e,l,t){let{keyboardDelegate:r,isDisabled:a,isRequired:o,name:n,form:u,validationBehavior:f="aria"}=e,c=Te({usage:"search",sensitivity:"base"}),s=S.useMemo(()=>r||new xe(l.collection,l.disabledKeys,t,c),[r,l.collection,l.disabledKeys,c,t]),{menuTriggerProps:m,menuProps:y}=Me({isDisabled:a,type:"listbox"},l,t),b=v=>{if(l.selectionManager.selectionMode!=="multiple")switch(v.key){case"ArrowLeft":{var I,E;v.preventDefault();let k=l.selectedKey!=null?(I=s.getKeyAbove)===null||I===void 0?void 0:I.call(s,l.selectedKey):(E=s.getFirstKey)===null||E===void 0?void 0:E.call(s);k&&l.setSelectedKey(k);break}case"ArrowRight":{var F,D;v.preventDefault();let k=l.selectedKey!=null?(F=s.getKeyBelow)===null||F===void 0?void 0:F.call(s,l.selectedKey):(D=s.getFirstKey)===null||D===void 0?void 0:D.call(s);k&&l.setSelectedKey(k);break}}},{typeSelectProps:p}=Ce({keyboardDelegate:s,selectionManager:l.selectionManager,onTypeSelect(v){l.setSelectedKey(v)}}),{isInvalid:V,validationErrors:h,validationDetails:x}=l.displayValidation,{labelProps:M,fieldProps:C,descriptionProps:d,errorMessageProps:T}=Ke({...e,labelElementType:"span",isInvalid:V,errorMessage:e.errorMessage||h});p.onKeyDown=p.onKeyDownCapture,delete p.onKeyDownCapture,l.selectionManager.selectionMode==="multiple"&&(p={});let K=Se(e,{labelable:!0}),g=B(p,m,C),j=J();return A.set(l,{isDisabled:a,isRequired:o,name:n,form:u,validationBehavior:f}),{labelProps:{...M,onClick:()=>{if(!e.isDisabled){var v;(v=t.current)===null||v===void 0||v.focus(),we("keyboard")}}},triggerProps:B(K,{...g,isDisabled:a,onKeyDown:Q(g.onKeyDown,b,e.onKeyDown),onKeyUp:e.onKeyUp,"aria-labelledby":[j,g["aria-labelledby"],g["aria-label"]&&!g["aria-labelledby"]?g.id:null].filter(Boolean).join(" "),onFocus(v){l.isFocused||(e.onFocus&&e.onFocus(v),e.onFocusChange&&e.onFocusChange(!0),l.setFocused(!0))},onBlur(v){l.isOpen||(e.onBlur&&e.onBlur(v),e.onFocusChange&&e.onFocusChange(!1),l.setFocused(!1))}}),valueProps:{id:j},menuProps:{...y,autoFocus:l.focusStrategy||!0,shouldSelectOnPressUp:!0,shouldFocusOnHover:!0,disallowEmptySelection:!0,linkBehavior:"selection",onBlur:v=>{v.currentTarget.contains(v.relatedTarget)||(e.onBlur&&e.onBlur(v),e.onFocusChange&&e.onFocusChange(!1),l.setFocused(!1))},"aria-labelledby":[C["aria-labelledby"],g["aria-label"]&&!C["aria-labelledby"]?g.id:null].filter(Boolean).join(" ")},descriptionProps:d,errorMessageProps:T,isInvalid:V,validationErrors:h,validationDetails:x,hiddenSelectProps:{isDisabled:a,name:n,label:e.label,state:l,triggerRef:t,form:u}}}function De(e,l,t){let r=A.get(l)||{},{autoComplete:a,name:o=r.name,form:n=r.form,isDisabled:u=r.isDisabled}=e,{validationBehavior:f,isRequired:c}=r,{visuallyHiddenProps:s}=ke({style:{position:"fixed",top:0,left:0}});ye(e.selectRef,l.defaultValue,l.setValue),be({validationBehavior:f,focus:()=>{var p;return(p=t.current)===null||p===void 0?void 0:p.focus()}},l,e.selectRef);let m=l.setValue,y=S.useCallback(p=>{p.target.multiple?m(Array.from(p.target.selectedOptions,V=>V.value)):m(p.currentTarget.value)},[m]);var b;return{containerProps:{...s,"aria-hidden":!0,"data-react-aria-prevent-focus":!0,"data-a11y-ignore":"aria-hidden-focus"},inputProps:{style:{display:"none"}},selectProps:{tabIndex:-1,autoComplete:a,disabled:u,multiple:l.selectionManager.selectionMode==="multiple",required:f==="native"&&c,name:o,form:n,value:(b=l.value)!==null&&b!==void 0?b:"",onChange:y,onInput:y}}}function Pe(e){let{state:l,triggerRef:t,label:r,name:a,form:o,isDisabled:n}=e,u=S.useRef(null),f=S.useRef(null),{containerProps:c,selectProps:s}=De({...e,selectRef:l.collection.size<=300?u:f},l,t);if(l.collection.size<=300)return q.createElement("div",{...c,"data-testid":"hidden-select-container"},q.createElement("label",null,r,q.createElement("select",{...s,ref:u},q.createElement("option",null),[...l.collection.getKeys()].map(m=>{let y=l.collection.getItem(m);if(y&&y.type==="item")return q.createElement("option",{key:y.key,value:y.key},y.textValue)}))));if(a){let m=A.get(l)||{},{validationBehavior:y}=m,b=Array.isArray(l.value)?l.value:[l.value];b.length===0&&(b=[null]);let p=b.map((V,h)=>{let x={type:"hidden",autoComplete:s.autoComplete,name:a,form:o,disabled:n,value:V??""};return y==="native"?q.createElement("input",{key:h,...x,ref:h===0?f:null,style:{display:"none"},type:"text",required:h===0?s.required:!1,onChange:()=>{}}):q.createElement("input",{key:h,...x,ref:h===0?f:null})});return q.createElement(q.Fragment,null,p)}return null}function We(e){let{selectionMode:l="single"}=e,t=Ve(e),[r,a]=S.useState(null),o=S.useMemo(()=>{var d;return e.defaultValue!==void 0?e.defaultValue:l==="single"?(d=e.defaultSelectedKey)!==null&&d!==void 0?d:null:[]},[e.defaultValue,e.defaultSelectedKey,l]),n=S.useMemo(()=>e.value!==void 0?e.value:l==="single"?e.selectedKey:void 0,[e.value,e.selectedKey,l]),[u,f]=qe(n,o,e.onChange),c=l==="single"&&Array.isArray(u)?u[0]:u,s=d=>{if(l==="single"){var T,K;let g=Array.isArray(d)?(K=d[0])!==null&&K!==void 0?K:null:d;f(g),g!==c&&((T=e.onSelectionChange)===null||T===void 0||T.call(e,g))}else{let g=[];Array.isArray(d)?g=d:d!=null&&(g=[d]),f(g)}},m=ge({...e,selectionMode:l,disallowEmptySelection:l==="single",allowDuplicateSelectionEvents:!0,selectedKeys:S.useMemo(()=>He(c),[c]),onSelectionChange:d=>{if(d!=="all"){if(l==="single"){var T;let K=(T=d.values().next().value)!==null&&T!==void 0?T:null;s(K),t.close()}else s([...d]);p.commitValidation()}}}),y=m.selectionManager.firstSelectedKey,b=S.useMemo(()=>[...m.selectionManager.selectedKeys].map(d=>m.collection.getItem(d)).filter(d=>d!=null),[m.selectionManager.selectedKeys,m.collection]),p=ve({...e,value:Array.isArray(c)&&c.length===0?null:c}),[V,h]=S.useState(!1),[x]=S.useState(c);var M,C;return{...p,...m,...t,value:c,defaultValue:o??x,setValue:s,selectedKey:y,setSelectedKey:s,selectedItem:(M=b[0])!==null&&M!==void 0?M:null,selectedItems:b,defaultSelectedKey:(C=e.defaultSelectedKey)!==null&&C!==void 0?C:e.selectionMode==="single"?x:null,focusStrategy:r,open(d=null){m.collection.size!==0&&(a(d),t.open())},toggle(d=null){m.collection.size!==0&&(a(d),t.toggle())},isFocused:V,setFocused:h}}function He(e){if(e!==void 0)return e===null?[]:Array.isArray(e)?e:[e]}const Ae="_wrapper_1rw0v_7",je="_trigger_1rw0v_18",Be="_medium_1rw0v_32",Ne="_icon_1rw0v_68",Oe="_tagGroup_1rw0v_74",_e="_listBoxItemCheckmark_1rw0v_90",Re="_triggerContainer_1rw0v_95",Le="_selectValueTag_1rw0v_101",Ue="_clearButton_1rw0v_117",ze="_truncate_1rw0v_129",Ge="_checkboxContainer_1rw0v_166",Xe="_selectAll_1rw0v_172",w={wrapper:Ae,trigger:je,medium:Be,icon:Ne,tagGroup:Oe,listBoxItemCheckmark:_e,triggerContainer:Re,selectValueTag:Le,clearButton:Ue,truncate:ze,checkboxContainer:Ge,selectAll:Xe},G=({item:e})=>i.jsx(re,{...e.value,textValue:e.textValue,"aria-label":e.textValue,children:({isDisabled:l,isSelected:t,selectionMode:r})=>i.jsxs(i.Fragment,{children:[r==="multiple"?i.jsx("div",{className:w.checkboxContainer,"aria-hidden":!0,children:i.jsx(R,{isDisabled:l,isSelected:t,isReadOnly:!0,excludeFromTabOrder:!0,"aria-label":e.textValue})}):null,e.rendered,t&&r==="single"?i.jsx(te,{size:20,className:w.listBoxItemCheckmark}):null]})}),Je=({section:e,state:l})=>i.jsx(ie,{...e.value,children:l.collection.getChildren?i.jsx(ae,{items:l.collection.getChildren(e.key),children:t=>i.jsx(G,{item:t})}):null}),P=({state:e,...l})=>i.jsx(ne,{...l,...e,escapeKeyBehavior:"none",selectionMode:e.selectionManager.selectionMode,onSelectionChange:t=>e.selectionManager.setSelectedKeys(t),selectedKeys:e.selectionManager.selectedKeys,items:e.collection,children:t=>t.type==="section"?i.jsx(Je,{state:e,section:t}):i.jsx(G,{item:t})});try{P.displayName="SelectListBox",P.__docgenInfo={description:"",displayName:"SelectListBox",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"SelectState<T, M>"}},isVirtualized:{defaultValue:null,description:"Whether the listbox uses virtual scrolling.",name:"isVirtualized",required:!1,type:{name:"boolean"}},keyboardDelegate:{defaultValue:null,description:`An optional keyboard delegate implementation for type to select,
to override the default.`,name:"keyboardDelegate",required:!1,type:{name:"KeyboardDelegate"}},layoutDelegate:{defaultValue:null,description:`A delegate object that provides layout information for items in the collection.
By default this uses the DOM, but this can be overridden to implement things like
virtualized scrolling.`,name:"layoutDelegate",required:!1,type:{name:"LayoutDelegate"}},shouldUseVirtualFocus:{defaultValue:null,description:"Whether the listbox items should use virtual focus instead of being focused directly.",name:"shouldUseVirtualFocus",required:!1,type:{name:"boolean"}},linkBehavior:{defaultValue:{value:"'override'"},description:`The behavior of links in the collection.
- 'action': link behaves like onAction.
- 'selection': link follows selection interactions (e.g. if URL drives selection).
- 'override': links override all other interactions (link items are not selectable).`,name:"linkBehavior",required:!1,type:{name:"enum",value:[{value:'"selection"'},{value:'"action"'},{value:'"override"'}]}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"Whether to auto focus the listbox or an option.",name:"autoFocus",required:!1,type:{name:"boolean | FocusStrategy"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!1,type:{name:"Iterable<T>"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},onAction:{defaultValue:null,description:"Handler that is called when a user performs an action on an item. The exact user event depends on\nthe collection's `selectionBehavior` prop and the interaction modality.",name:"onAction",required:!1,type:{name:"((key: Key) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},label:{defaultValue:null,description:"An optional visual label for the listbox.",name:"label",required:!1,type:{name:"ReactNode"}},disallowEmptySelection:{defaultValue:null,description:"Whether the collection allows empty selection.",name:"disallowEmptySelection",required:!1,type:{name:"boolean"}},onSelectionChange:{defaultValue:null,description:"Handler that is called when the selection changes.",name:"onSelectionChange",required:!1,type:{name:"((keys: Selection) => void)"}},shouldFocusWrap:{defaultValue:null,description:"Whether focus should wrap around when the end/start is reached.",name:"shouldFocusWrap",required:!1,type:{name:"boolean"}},escapeKeyBehavior:{defaultValue:{value:"'clearSelection'"},description:`Whether pressing the escape key should clear selection in the listbox or not.

Most experiences should not modify this option as it eliminates a keyboard user's ability to
easily clear selection. Only use if the escape key is being handled externally or should not
trigger selection clearing contextually.`,name:"escapeKeyBehavior",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"clearSelection"'}]}},selectionMode:{defaultValue:null,description:"The type of selection that is allowed in the collection.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"single"'},{value:'"multiple"'}]}},selectedKeys:{defaultValue:null,description:"The currently selected keys in the collection (controlled).",name:"selectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},defaultSelectedKeys:{defaultValue:null,description:"The initial selected keys in the collection (uncontrolled).",name:"defaultSelectedKeys",required:!1,type:{name:'Iterable<Key> | "all"'}},shouldSelectOnPressUp:{defaultValue:null,description:"Whether selection should occur on press up instead of press down.",name:"shouldSelectOnPressUp",required:!1,type:{name:"boolean"}},selectionBehavior:{defaultValue:null,description:"How multiple selection should behave in the collection.",name:"selectionBehavior",required:!1,type:{name:"enum",value:[{value:'"toggle"'},{value:'"replace"'}]}},shouldFocusOnHover:{defaultValue:null,description:"Whether options should be focused when the user hovers over them.",name:"shouldFocusOnHover",required:!1,type:{name:"boolean"}}}}}catch{}const Qe={clearAll:"Clear all",selectAll:"Select all",selectedItems:"Selected items",chosen:"chosen"},Ye={clearAll:"Rensa alla",selectAll:"Välj alla",selectedItems:"Valda objekt",chosen:"valda"},X={en:Qe,sv:Ye},W=({state:{selectedItems:e},isDisabled:l,parentWidth:t,onClear:r,triggerRef:a,isClearable:o})=>{const n=L(X);return i.jsxs("div",{className:w.selectValueTag,"data-disabled":l||void 0,children:[i.jsx("span",{className:w.truncate,style:{maxWidth:t-92},children:e!=null&&e.length&&e.length>1?`${e.length} ${n.format("chosen")}`:e==null?void 0:e[0].textValue}),o&&i.jsx("button",{disabled:l,"aria-label":n.format("clearAll"),className:w.clearButton,onClick:()=>{var u;r(),(u=a==null?void 0:a.current)==null||u.focus()},children:i.jsx(de,{width:20,height:20})})]})};try{W.displayName="MultiSelectValueTag",W.__docgenInfo={description:"",displayName:"MultiSelectValueTag",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"SelectState<T, M>"}},parentWidth:{defaultValue:null,description:"",name:"parentWidth",required:!0,type:{name:"number"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!0,type:{name:"() => void"}},triggerRef:{defaultValue:null,description:"",name:"triggerRef",required:!0,type:{name:"MutableRefObject<HTMLButtonElement | null>"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},size:{defaultValue:{value:"'large'"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},keyboardDelegate:{defaultValue:null,description:`An optional keyboard delegate implementation for type to select,
to override the default.`,name:"keyboardDelegate",required:!1,type:{name:"KeyboardDelegate"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"Key | Key[] | null"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: ValueType<M>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},form:{defaultValue:null,description:"The `<form>` element to associate the input with.\nThe value of this attribute must be the id of a `<form>` in the same document.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#form).",name:"form",required:!1,type:{name:"string"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!1,type:{name:"Iterable<T>"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"Key | Key[] | null"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: ValidationType<M>) => true | ValidationError | null)"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},onSelectionChange:{defaultValue:null,description:`Handler that is called when the selection changes.
@deprecated`,name:"onSelectionChange",required:!1,type:{name:"((key: Key | null) => void)"}},selectedKey:{defaultValue:null,description:`The currently selected key in the collection (controlled).
@deprecated`,name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:`The initial selected key in the collection (uncontrolled).
@deprecated`,name:"defaultSelectedKey",required:!1,type:{name:"Key"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},selectionMode:{defaultValue:{value:"'single'"},description:"Whether single or multiple selection is enabled.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}}}}}catch{}const H=({autoFocus:e,excludeFromTabOrder:l,isDisabled:t,size:r="large",isOpen:a,isInvalid:o,selectionMode:n,state:{selectedItems:u},placeholder:f,children:c,triggerRef:s,...m})=>{const{buttonProps:y}=ue({autoFocus:e,excludeFromTabOrder:l,isDisabled:t,...m},s),b=n==="multiple";return i.jsxs("div",{className:w.triggerContainer,"data-disabled":t||void 0,children:[i.jsxs("button",{...y,autoFocus:e,className:_(w.trigger,{[w.medium]:r==="medium"}),"data-disabled":t||void 0,"data-invalid":o||void 0,"data-open":a||void 0,ref:s,type:"button",children:[b&&!u.length?i.jsx("span",{children:f}):null,b?null:i.jsx("span",{children:u.length?u[0].textValue:f}),i.jsx("div",{className:w.icon,"aria-hidden":"true",children:i.jsx(ce,{size:20})})]}),c]})};try{H.displayName="SelectTrigger",H.__docgenInfo={description:"",displayName:"SelectTrigger",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"SelectState<T, M>"}},triggerRef:{defaultValue:null,description:"",name:"triggerRef",required:!0,type:{name:"MutableRefObject<HTMLButtonElement | null>"}},children:{defaultValue:null,description:"The content to display in the button.",name:"children",required:!0,type:{name:"ReactNode"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"Key | Key[] | null"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: ValueType<M>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},form:{defaultValue:null,description:"The `<form>` element to associate the input with.\nThe value of this attribute must be the id of a `<form>` in the same document.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#form).",name:"form",required:!1,type:{name:"string"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!1,type:{name:"Iterable<T>"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"large"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: ValidationType<M>) => true | ValidationError | null)"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},onSelectionChange:{defaultValue:null,description:`Handler that is called when the selection changes.
@deprecated`,name:"onSelectionChange",required:!1,type:{name:"((key: Key | null) => void)"}},selectedKey:{defaultValue:null,description:`The currently selected key in the collection (controlled).
@deprecated`,name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:`The initial selected key in the collection (uncontrolled).
@deprecated`,name:"defaultSelectedKey",required:!1,type:{name:"Key"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},selectionMode:{defaultValue:{value:"'single'"},description:"Whether single or multiple selection is enabled.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},keyboardDelegate:{defaultValue:null,description:`An optional keyboard delegate implementation for type to select,
to override the default.`,name:"keyboardDelegate",required:!1,type:{name:"KeyboardDelegate"}},onPress:{defaultValue:null,description:"Handler that is called when the press is released over the target.",name:"onPress",required:!1,type:{name:"((e: PressEvent) => void)"}},onPressStart:{defaultValue:null,description:"Handler that is called when a press interaction starts.",name:"onPressStart",required:!1,type:{name:"((e: PressEvent) => void)"}},onPressEnd:{defaultValue:null,description:`Handler that is called when a press interaction ends, either
over the target or when the pointer leaves the target.`,name:"onPressEnd",required:!1,type:{name:"((e: PressEvent) => void)"}},onPressChange:{defaultValue:null,description:"Handler that is called when the press state changes.",name:"onPressChange",required:!1,type:{name:"((isPressed: boolean) => void)"}},onPressUp:{defaultValue:null,description:`Handler that is called when a press is released over the target, regardless of
whether it started on the target or not.`,name:"onPressUp",required:!1,type:{name:"((e: PressEvent) => void)"}},onClick:{defaultValue:null,description:"**Not recommended – use `onPress` instead.** `onClick` is an alias for `onPress`\nprovided for compatibility with other libraries. `onPress` provides \nadditional event details for non-mouse interactions.",name:"onClick",required:!1,type:{name:"((e: MouseEvent<FocusableElement, MouseEvent>) => void)"}},href:{defaultValue:null,description:'A URL to link to if elementType="a".',name:"href",required:!1,type:{name:"string"}},target:{defaultValue:null,description:"The target window for the link.",name:"target",required:!1,type:{name:"string"}},rel:{defaultValue:null,description:"The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel).",name:"rel",required:!1,type:{name:"string"}},elementType:{defaultValue:{value:"'button'"},description:"The HTML element or React element used to render the button, e.g. 'div', 'a', or `RouterLink`.",name:"elementType",required:!1,type:{name:'"button" | JSXElementConstructor<any>'}},"aria-disabled":{defaultValue:null,description:"Indicates whether the element is disabled to users of assistive technology.",name:"aria-disabled",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-expanded":{defaultValue:null,description:"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",name:"aria-expanded",required:!1,type:{name:'boolean | "true" | "false"'}},"aria-haspopup":{defaultValue:null,description:"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",name:"aria-haspopup",required:!1,type:{name:'boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree"'}},"aria-controls":{defaultValue:null,description:"Identifies the element (or elements) whose contents or presence are controlled by the current element.",name:"aria-controls",required:!1,type:{name:"string"}},"aria-pressed":{defaultValue:null,description:'Indicates the current "pressed" state of toggle buttons.',name:"aria-pressed",required:!1,type:{name:'boolean | "true" | "false" | "mixed"'}},"aria-current":{defaultValue:null,description:"Indicates whether this element represents the current item within a container or set of related elements.",name:"aria-current",required:!1,type:{name:'boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time"'}},type:{defaultValue:{value:"'button'"},description:"The behavior of the button when used in an HTML form.",name:"type",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"submit"'},{value:'"reset"'}]}},preventFocusOnPress:{defaultValue:null,description:`Whether to prevent focus from moving to the button when pressing it.

Caution, this can make the button inaccessible and should only be used when alternative keyboard interaction is provided,
such as ComboBox's MenuTrigger or a NumberField's increment/decrement control.`,name:"preventFocusOnPress",required:!1,type:{name:"boolean"}},formAction:{defaultValue:null,description:`The URL that processes the information submitted by the button.
Overrides the action attribute of the button's form owner.`,name:"formAction",required:!1,type:{name:"string"}},formEncType:{defaultValue:null,description:"Indicates how to encode the form data that is submitted.",name:"formEncType",required:!1,type:{name:"string"}},formMethod:{defaultValue:null,description:"Indicates the HTTP method used to submit the form.",name:"formMethod",required:!1,type:{name:"string"}},formNoValidate:{defaultValue:null,description:"Indicates that the form is not to be validated when it is submitted.",name:"formNoValidate",required:!1,type:{name:"boolean"}},formTarget:{defaultValue:null,description:"Overrides the target attribute of the button's form owner.",name:"formTarget",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value associated with the button's name when it's submitted with the form data.",name:"value",required:!1,type:{name:"string"}}}}}catch{}const $=({state:e,errorMessage:l})=>i.jsx(me.Provider,{value:{...e.displayValidation},children:i.jsx(fe,{children:l})});try{$.displayName="SelectFieldError",$.__docgenInfo={description:"",displayName:"SelectFieldError",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"SelectState<T, M>"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},size:{defaultValue:{value:"'large'"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},keyboardDelegate:{defaultValue:null,description:`An optional keyboard delegate implementation for type to select,
to override the default.`,name:"keyboardDelegate",required:!1,type:{name:"KeyboardDelegate"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"Key | Key[] | null"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: ValueType<M>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},form:{defaultValue:null,description:"The `<form>` element to associate the input with.\nThe value of this attribute must be the id of a `<form>` in the same document.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#form).",name:"form",required:!1,type:{name:"string"}},items:{defaultValue:null,description:"Item objects in the collection.",name:"items",required:!1,type:{name:"Iterable<T>"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"Key | Key[] | null"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: ValidationType<M>) => true | ValidationError | null)"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},onSelectionChange:{defaultValue:null,description:`Handler that is called when the selection changes.
@deprecated`,name:"onSelectionChange",required:!1,type:{name:"((key: Key | null) => void)"}},selectedKey:{defaultValue:null,description:`The currently selected key in the collection (controlled).
@deprecated`,name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:`The initial selected key in the collection (uncontrolled).
@deprecated`,name:"defaultSelectedKey",required:!1,type:{name:"Key"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},selectionMode:{defaultValue:{value:"'single'"},description:"Whether single or multiple selection is enabled.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}}}}}catch{}const Ze=({isClearable:e=!0,popover:l,selectRef:t,...r})=>{var V;const a={errorPosition:"top",isClearable:e,size:"large",popover:l,selectRef:t,...r},o=Y(t),n=We(a),u=L(X),{labelProps:f,triggerProps:c,valueProps:s,menuProps:m,hiddenSelectProps:y}=Fe(a,n,o),{width:b}=se(o.current,{includePadding:!0}),p=()=>n.selectionManager.isSelectAll?n.selectionManager.clearSelection():n.setValue(Array.from(n.collection.getKeys()));return i.jsxs("div",{className:_(w.wrapper,a.className),children:[i.jsx(Pe,{...y,label:`${a.label}-hidden`}),i.jsx(pe,{popover:l,children:a.label&&i.jsx(he,{...f,"data-disabled":a.isDisabled||void 0,children:a.label})}),a.description&&i.jsx($e,{slot:"description",children:a.description}),a.errorPosition==="top"&&i.jsx($,{...a,state:n}),i.jsx(H,{...a,...c,value:c.value,isInvalid:n.displayValidation.isInvalid,triggerRef:o,state:n,children:a.selectionMode==="multiple"&&typeof n.value!="number"&&((V=n==null?void 0:n.value)!=null&&V.length)?i.jsx("span",{...s,children:i.jsx(W,{...a,state:n,parentWidth:b,onClear:()=>n.selectionManager.clearSelection(),triggerRef:o})}):null}),a.errorPosition==="bottom"&&i.jsx($,{...a,state:n}),i.jsxs(oe,{isOpen:n.isOpen,onOpenChange:h=>{h||n.close()},triggerRef:o,style:{width:b},children:[a.isSelectableAll&&i.jsx(R,{isSelected:n.selectionManager.isSelectAll,isIndeterminate:!n.selectionManager.isSelectAll&&!n.selectionManager.isEmpty,className:w.selectAll,onChange:p,children:u.format("selectAll")}),i.jsx(P,{...m,disallowEmptySelection:!a.isClearable,state:n})]}),a.showTags&&!!n.selectedItems&&i.jsx(Z,{"aria-label":u.format("selectedItems"),selectionBehavior:"toggle",onRemove:h=>{n.selectionManager.toggleSelection(Array.from(h)[0])},className:w.tagGroup,children:i.jsx(ee,{items:n.selectedItems,children:h=>i.jsx(le,{textValue:h.textValue,id:h.key,dismissable:!0,isDisabled:a.isDisabled,children:h.textValue},h.key)})})]})},el=({options:e,...l},t)=>i.jsx(Ze,{...l,items:e,selectRef:t,children:r=>r.children?i.jsx(Ee,{items:r.children,title:r.name,children:a=>i.jsx(N,{textValue:a.textValue,children:a.name})},r.name):i.jsx(N,{textValue:r.textValue,children:r.name})}),O=S.forwardRef(el);try{O.displayName="Select",O.__docgenInfo={description:"",displayName:"Select",props:{isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"Sets the CSS [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element.",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"Key | Key[] | null"}},autoFocus:{defaultValue:null,description:"Whether the element should receive focus on render.",name:"autoFocus",required:!1,type:{name:"boolean"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: ValueType<M>) => void)"}},onKeyDown:{defaultValue:null,description:"Handler that is called when a key is pressed.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},onKeyUp:{defaultValue:null,description:"Handler that is called when a key is released.",name:"onKeyUp",required:!1,type:{name:"((e: KeyboardEvent) => void)"}},form:{defaultValue:null,description:"The `<form>` element to associate the input with.\nThe value of this attribute must be the id of a `<form>` in the same document.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#form).",name:"form",required:!1,type:{name:"string"}},disabledKeys:{defaultValue:null,description:"The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.",name:"disabledKeys",required:!1,type:{name:"Iterable<Key>"}},name:{defaultValue:null,description:"The name of the input, used when submitting an HTML form.",name:"name",required:!1,type:{name:"string"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"Key | Key[] | null"}},excludeFromTabOrder:{defaultValue:null,description:`Whether to exclude the element from the sequential tab order. If true,
the element will not be focusable via the keyboard by tabbing. This should
be avoided except in rare scenarios where an alternative means of accessing
the element or its functionality via the keyboard is available.`,name:"excludeFromTabOrder",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"'large'"},description:"Component size (large: height 48px, medium: height 40px)",name:"size",required:!1,type:{name:"enum",value:[{value:'"large"'},{value:'"medium"'}]}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: ValidationType<M>) => true | ValidationError | null)"}},errorMessage:{defaultValue:null,description:"Error message to be displayed in case of invalid state",name:"errorMessage",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!0,type:{name:"string"}},autoComplete:{defaultValue:null,description:"Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).",name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Placeholder value",name:"placeholder",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"Optional description",name:"description",required:!1,type:{name:"string"}},onSelectionChange:{defaultValue:null,description:`Handler that is called when the selection changes.
@deprecated`,name:"onSelectionChange",required:!1,type:{name:"((key: Key | null) => void)"}},selectedKey:{defaultValue:null,description:`The currently selected key in the collection (controlled).
@deprecated`,name:"selectedKey",required:!1,type:{name:"Key | null"}},defaultSelectedKey:{defaultValue:null,description:`The initial selected key in the collection (uncontrolled).
@deprecated`,name:"defaultSelectedKey",required:!1,type:{name:"Key"}},onOpenChange:{defaultValue:null,description:"Method that is called when the open state of the menu changes.",name:"onOpenChange",required:!1,type:{name:"((isOpen: boolean) => void)"}},errorPosition:{defaultValue:{value:'"top"'},description:"The position of the error message",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},isOpen:{defaultValue:null,description:"Sets the open state of the menu.",name:"isOpen",required:!1,type:{name:"boolean"}},defaultOpen:{defaultValue:null,description:"Sets the default open state of the menu.",name:"defaultOpen",required:!1,type:{name:"boolean"}},selectionMode:{defaultValue:{value:"'single'"},description:"Whether single or multiple selection is enabled.",name:"selectionMode",required:!1,type:{name:"enum",value:[{value:'"single"'},{value:'"multiple"'}]}},isClearable:{defaultValue:{value:"true"},description:"Whether the field can be emptied.",name:"isClearable",required:!1,type:{name:"boolean"}},isSelectableAll:{defaultValue:null,description:"Whether to show a button to select all items.",name:"isSelectableAll",required:!1,type:{name:"boolean"}},showTags:{defaultValue:null,description:"Show selected items as tags below select",name:"showTags",required:!1,type:{name:"boolean"}},keyboardDelegate:{defaultValue:null,description:`An optional keyboard delegate implementation for type to select,
to override the default.`,name:"keyboardDelegate",required:!1,type:{name:"KeyboardDelegate"}},options:{defaultValue:null,description:"Item objects in the collection.",name:"options",required:!0,type:{name:"T[]"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}}}}}catch{}export{O as S};
