import{r as f,j as r}from"./iframe-C1OjVKLQ.js";import{$ as V,C as b,s as q,a as x}from"./Checkbox-RhwvqtT6.js";import{$ as S,F as $}from"./FieldError-C6hHY30r.js";import{a as R,L as I}from"./Label-D62eWD2g.js";import{a as P,d as E}from"./useFormValidation-CuTeBXtI.js";import{$ as C}from"./useControlledState-DymAS9IR.js";import{b as M}from"./utils-BqJ8lzMo.js";import{c as F,e as T}from"./useFocusRing-DDPJ_J0E.js";import{$ as A}from"./useField-odABTSdM.js";import{u as w}from"./useLocalizedStringFormatter-eG8OdLkB.js";import{T as D}from"./Text-B0u0FgxD.js";function W(e,a){let{isDisabled:i,name:u,form:c,validationBehavior:d="aria"}=e,{isInvalid:n,validationErrors:o,validationDetails:t}=a.displayValidation,{labelProps:m,fieldProps:p,descriptionProps:l,errorMessageProps:s}=A({...e,labelElementType:"span",isInvalid:n,errorMessage:e.errorMessage||o});V.set(a,{name:u,form:c,descriptionId:l.id,errorMessageId:s.id,validationBehavior:d});let h=F(e,{labelable:!0}),{focusWithinProps:g}=T({onBlurWithin:e.onBlur,onFocusWithin:e.onFocus,onFocusWithinChange:e.onFocusChange});return{groupProps:M(h,{role:"group","aria-disabled":i||void 0,...p,...g}),labelProps:m,descriptionProps:l,errorMessageProps:s,isInvalid:n,validationErrors:o,validationDetails:t}}function _(e={}){let[a,i]=C(e.value,e.defaultValue||[],e.onChange),[u]=f.useState(a),c=!!e.isRequired&&a.length===0,d=f.useRef(new Map),n=P({...e,value:a}),o=n.displayValidation.isInvalid;var t,m;return{...n,value:a,defaultValue:(t=e.defaultValue)!==null&&t!==void 0?t:u,setValue(l){e.isReadOnly||e.isDisabled||i(l)},isDisabled:e.isDisabled||!1,isReadOnly:e.isReadOnly||!1,isSelected(l){return a.includes(l)},addValue(l){e.isReadOnly||e.isDisabled||a.includes(l)||(a=a.concat(l),i(a))},removeValue(l){e.isReadOnly||e.isDisabled||a.includes(l)&&i(a.filter(s=>s!==l))},toggleValue(l){e.isReadOnly||e.isDisabled||(a.includes(l)?i(a.filter(s=>s!==l)):i(a.concat(l)))},setInvalid(l,s){let h=new Map(d.current);s.isInvalid?h.set(l,s):h.delete(l),d.current=h,n.updateValidation(E(...h.values()))},validationState:(m=e.validationState)!==null&&m!==void 0?m:o?"invalid":null,isInvalid:o,isRequired:c}}const j=(e,{value:a})=>{const i=f.Children.toArray(e).filter(t=>f.isValidElement(t)&&t.type===b),u=f.Children.count(i),c=f.Children.toArray(e).filter(t=>f.isValidElement(t)).filter(t=>!!t&&t.type===b).map(t=>t.props.value),d=a.length===0,n=a.length===u;return{allSelected:n,someSelected:!d&&!n,checkboxValues:c}},v=({state:e,errorMessage:a})=>r.jsx(S.Provider,{value:e.displayValidation,children:r.jsx($,{children:a})});try{v.displayName="CheckboxGroupFieldError",v.__docgenInfo={description:"",displayName:"CheckboxGroupFieldError",props:{state:{defaultValue:null,description:"",name:"state",required:!0,type:{name:"CheckboxGroupState"}},showSelectAll:{defaultValue:null,description:"",name:"showSelectAll",required:!1,type:{name:"boolean"}},selectAllLabel:{defaultValue:null,description:"",name:"selectAllLabel",required:!1,type:{name:"string"}},errorPosition:{defaultValue:null,description:"",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},popover:{defaultValue:null,description:"",name:"popover",required:!1,type:{name:"InfoPopoverProps"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string[]"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: string[]) => void)"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"A description for the field. Provides a hint such as specific requirements for what to choose.",name:"description",required:!1,type:{name:"ReactNode"}},errorMessage:{defaultValue:null,description:"An error message for the field.",name:"errorMessage",required:!1,type:{name:"ReactNode | ((v: ValidationResult) => ReactNode)"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: string[]) => true | ValidationError | null)"}},form:{defaultValue:null,description:"The `<form>` element to associate the input with.\nThe value of this attribute must be the id of a `<form>` in the same document.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#form).",name:"form",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}}}}}catch{}const L={selectAll:"Select all"},N={selectAll:"VÃ¤lj alla"},H={en:L,sv:N};function y(e){const a=_(e),i=w(H),{groupProps:u,labelProps:c,descriptionProps:d}=W(e,a),{allSelected:n,someSelected:o,checkboxValues:t}=j(e.children,a),m=p=>{a.setValue(p?t:[])};return r.jsxs("div",{...u,className:q.checkboxGroup,"data-readonly":e.isReadOnly||void 0,"data-disabled":e.isDisabled||void 0,children:[r.jsx(R,{popover:e.popover,children:e.label&&r.jsx(I,{...c,children:e.label})}),e.description&&r.jsx(D,{slot:"description",...d,children:e.description}),e.errorPosition==="top"&&r.jsx(v,{...e,state:a}),e.showSelectAll&&r.jsx(b,{isSelected:n,isIndeterminate:o,isReadOnly:e.isReadOnly,onChange:m,children:e.selectAllLabel||i.format("selectAll")}),r.jsx(x.Provider,{value:a,children:e.children}),e.errorPosition==="bottom"&&r.jsx(v,{...e,state:a})]})}try{y.displayName="CheckboxGroup",y.__docgenInfo={description:"",displayName:"CheckboxGroup",props:{showSelectAll:{defaultValue:null,description:"",name:"showSelectAll",required:!1,type:{name:"boolean"}},selectAllLabel:{defaultValue:null,description:"",name:"selectAllLabel",required:!1,type:{name:"string"}},errorPosition:{defaultValue:null,description:"",name:"errorPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},popover:{defaultValue:null,description:"",name:"popover",required:!1,type:{name:"InfoPopoverProps"}},value:{defaultValue:null,description:"The current value (controlled).",name:"value",required:!1,type:{name:"string[]"}},defaultValue:{defaultValue:null,description:"The default value (uncontrolled).",name:"defaultValue",required:!1,type:{name:"string[]"}},onChange:{defaultValue:null,description:"Handler that is called when the value changes.",name:"onChange",required:!1,type:{name:"((value: string[]) => void)"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},isDisabled:{defaultValue:null,description:"Whether the input is disabled.",name:"isDisabled",required:!1,type:{name:"boolean"}},isReadOnly:{defaultValue:null,description:"Whether the input can be selected but not changed by the user.",name:"isReadOnly",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The content to display as the label.",name:"label",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"A description for the field. Provides a hint such as specific requirements for what to choose.",name:"description",required:!1,type:{name:"ReactNode"}},errorMessage:{defaultValue:null,description:"An error message for the field.",name:"errorMessage",required:!1,type:{name:"ReactNode | ((v: ValidationResult) => ReactNode)"}},isRequired:{defaultValue:null,description:"Whether user input is required on the input before form submission.",name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Whether the input value is invalid.",name:"isInvalid",required:!1,type:{name:"boolean"}},validationState:{defaultValue:null,description:"@deprecated Use `isInvalid` instead.",name:"validationState",required:!1,type:{name:"enum",value:[{value:'"valid"'},{value:'"invalid"'}]}},validationBehavior:{defaultValue:{value:"'aria'"},description:`Whether to use native HTML form validation to prevent form submission
when the value is missing or invalid, or mark the field as required
or invalid via ARIA.`,name:"validationBehavior",required:!1,type:{name:"enum",value:[{value:'"aria"'},{value:'"native"'}]}},validate:{defaultValue:null,description:'A function that returns an error message if a given value is invalid.\nValidation errors are displayed to the user when the form is submitted\nif `validationBehavior="native"`. For realtime validation, use the `isInvalid`\nprop instead.',name:"validate",required:!1,type:{name:"((value: string[]) => true | ValidationError | null)"}},form:{defaultValue:null,description:"The `<form>` element to associate the input with.\nThe value of this attribute must be the id of a `<form>` in the same document.\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#form).",name:"form",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).",name:"id",required:!1,type:{name:"string"}},"aria-label":{defaultValue:null,description:"Defines a string value that labels the current element.",name:"aria-label",required:!1,type:{name:"string"}},"aria-labelledby":{defaultValue:null,description:"Identifies the element (or elements) that labels the current element.",name:"aria-labelledby",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-details":{defaultValue:null,description:"Identifies the element (or elements) that provide a detailed, extended description for the object.",name:"aria-details",required:!1,type:{name:"string"}},"aria-errormessage":{defaultValue:null,description:"Identifies the element that provides an error message for the object.",name:"aria-errormessage",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Handler that is called when the element receives focus.",name:"onFocus",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onBlur:{defaultValue:null,description:"Handler that is called when the element loses focus.",name:"onBlur",required:!1,type:{name:"((e: FocusEvent<Element, Element>) => void)"}},onFocusChange:{defaultValue:null,description:"Handler that is called when the element's focus status changes.",name:"onFocusChange",required:!1,type:{name:"((isFocused: boolean) => void)"}}}}}catch{}export{y as C};
